(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_ublaboo-datagrid_assets_datagrid-instant-url-refresh_js-node_modules_ubl-943333"],{

/***/ "./node_modules/ublaboo-datagrid/assets/datagrid-instant-url-refresh.js":
/*!******************************************************************************!*\
  !*** ./node_modules/ublaboo-datagrid/assets/datagrid-instant-url-refresh.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var naja = __webpack_require__(/*! naja */ "./node_modules/naja/dist/Naja.esm.js")["default"];
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
var dataGridRegisterAjaxCall;

if (typeof naja !== "undefined") {
	dataGridRegisterAjaxCall = function (params) {
		var method = params.type || 'GET';
		var data = params.data || null;

		naja.makeRequest(method, params.url, data, {
			history: 'replace'
		})
			.then(params.success)
			.catch(params.error);
	};

} else {
		dataGridRegisterAjaxCall = function (params) {
			$.nette.ajax(params);
		};
}

document.addEventListener('DOMContentLoaded', function () {
	var element = document.querySelector('.datagrid');

	if (element !== null) {
		return dataGridRegisterAjaxCall({
			type: 'GET',
			url: element.getAttribute('data-refresh-state')
		});
	}
});


/***/ }),

/***/ "./node_modules/ublaboo-datagrid/assets/datagrid-spinners.js":
/*!*******************************************************************!*\
  !*** ./node_modules/ublaboo-datagrid/assets/datagrid-spinners.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var naja = __webpack_require__(/*! naja */ "./node_modules/naja/dist/Naja.esm.js")["default"];
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
var dataGridRegisterExtension;

if (typeof naja !== "undefined") {
	var isNaja2 = function () { return naja && naja.VERSION && naja.VERSION >= 2 };
	var najaEventParams = function (params) { return isNaja2() ? params.detail : params };
	var najaRequest = function (params) { return isNaja2() ? params.detail.request : params.xhr };
	dataGridRegisterExtension = function (name, extension) {
		var init = extension.init;
		var success = extension.success;
		var before = extension.before;
		var complete = extension.complete;


		var NewExtension = function NewExtension(naja, name) {
			this.name = name;

			this.initialize = function (naja) {
				if(init) {
					naja.addEventListener('init', function (params)  {
						init(najaEventParams(params).defaultOptions);
					});
				}

				if(success) {
					naja.addEventListener('success', function (params)  {
						var payload = isNaja2() ? params.detail.payload : params.response;
						success(payload, najaEventParams(params).options);
					});
				}

				if(before) {
					naja.addEventListener('before', function (params) {
						before(najaRequest(params), najaEventParams(params).options);
					});
				}

				if(complete) {
					naja.addEventListener('complete', function (params) {
						complete(najaRequest(params), najaEventParams(params).options);
					});
				}
			}
			if (!isNaja2()) {
				this.initialize(naja);
			}
			return this;
		}

		if (isNaja2()) {
			naja.registerExtension(new NewExtension(null, name));
		} else {
			naja.registerExtension(NewExtension, name);
		}
	};
} else if ($.nette) {
		dataGridRegisterExtension = function (name, extension) {
			$.nette.ext(name, extension);
		};
}

dataGridRegisterExtension('ublaboo-spinners', {
	before: function(xhr, settings) {
		var el, id, row_detail, spinner_template, grid_fullname;
		if (settings.nette) {
			el = settings.nette.el;
			spinner_template = $('<div class="ublaboo-spinner ublaboo-spinner-small"><i></i><i></i><i></i><i></i></div>');
			if (el.is('.datagrid [name="group_action[submit]"]')) {
				return el.after(spinner_template);
			} else if (el.is('.datagrid a') && el.data('toggle-detail')) {
				id = settings.nette.el.attr('data-toggle-detail');
				grid_fullname = settings.nette.el.attr('data-toggle-detail-grid-fullname');
				row_detail = $('.item-detail-' + grid_fullname + '-id-' + id);
				if (!row_detail.hasClass('loaded')) {
					return el.addClass('ublaboo-spinner-icon');
				}
			} else if (el.is('.datagrid .col-pagination a')) {
				return el.closest('.row-grid-bottom').find('.col-per-page').prepend(spinner_template);
			} else if (el.is('.datagrid .datagrid-per-page-submit')) {
				return el.closest('.row-grid-bottom').find('.col-per-page').prepend(spinner_template);
			} else if (el.is('.datagrid .reset-filter')) {
				return el.closest('.row-grid-bottom').find('.col-per-page').prepend(spinner_template);
			}
		}
	},
	complete: function() {
		$('.ublaboo-spinner').remove();
		return $('.ublaboo-spinner-icon').removeClass('ublaboo-spinner-icon');
	}
});


/***/ }),

/***/ "./node_modules/ublaboo-datagrid/assets/datagrid.js":
/*!**********************************************************!*\
  !*** ./node_modules/ublaboo-datagrid/assets/datagrid.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

/* provided dependency */ var naja = __webpack_require__(/*! naja */ "./node_modules/naja/dist/Naja.esm.js")["default"];
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
var dataGridRegisterExtension, dataGridRegisterAjaxCall, dataGridLoad, dataGridSubmitForm;

if (typeof naja !== "undefined") {
	var isNaja2 = function () { return naja && naja.VERSION && naja.VERSION >= 2 };
	var najaEventParams = function (params) { return isNaja2() ? params.detail : params };
	var najaRequest = function (params) { return isNaja2() ? params.detail.request : params.xhr };
	dataGridRegisterExtension = function (name, extension) {
		var init = extension.init;
		var success = extension.success;
		var before = extension.before;
		var complete = extension.complete;
		var interaction = extension.interaction;


		var NewExtension = function NewExtension(naja, name) {
			this.name = name;

			this.initialize = function (naja) {
				if(init) {
					naja.addEventListener('init', function (params)  {
						init(najaEventParams(params).defaultOptions);
					});
				}

				if(success) {
					naja.addEventListener('success', function (params)  {
						var payload = isNaja2() ? params.detail.payload : params.response;
						success(payload, najaEventParams(params).options);
					});
				}

				var interactionTarget = naja;
				if (isNaja2()) {
					interactionTarget = interactionTarget.uiHandler;
				}

				interactionTarget.addEventListener('interaction', function (params) {
					if (isNaja2()) {
						params.detail.options.nette = {
							el: $(params.detail.element)
						}
					} else {
						params.options.nette = {
							el: $(params.element)
						}
					}
					if (interaction) {
						if (!interaction(najaEventParams(params).options)){
							params.preventDefault();
						}
					}
				});

				if(before) {
					naja.addEventListener('before', function (params) {
						if (!before(najaRequest(params), najaEventParams(params).options))
							params.preventDefault();
					});
				}

				if(complete) {
					naja.addEventListener('complete', function (params) {
						complete(najaRequest(params), najaEventParams(params).options);
					});
				}
			}
			if (!isNaja2()) {
				this.initialize(naja);
			}
			return this;
		}

		if (isNaja2()) {
			naja.registerExtension(new NewExtension(null, name));
		} else {
			naja.registerExtension(NewExtension, name);
		}
	};


	dataGridRegisterAjaxCall = function (params) {
        var method = params.type || 'GET';
        var data = params.data || null;

		naja.makeRequest(method, params.url, data, {})
			.then(params.success)
			.catch(params.error);
	};

	dataGridLoad = function () {
		naja.load();
	};

	dataGridSubmitForm = function (form) {
		return naja.uiHandler.submitForm(form.get(0));
	};
} else if ($.nette) {
	dataGridRegisterExtension = function (name, extension) {
		$.nette.ext(name, extension);
	};
	dataGridRegisterAjaxCall = function (params) {
		$.nette.ajax(params);
	};
	dataGridLoad = function () {
		$.nette.load();
	};
	dataGridSubmitForm = function (form) {
		return form.submit();
	};
} else {
	throw new Error("Include Naja.js or nette.ajax for datagrids to work!")
}


var datagridFitlerMultiSelect, datagridGroupActionMultiSelect, datagridShiftGroupSelection, datagridSortable, datagridSortableTree, getEventDomPath,
	indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

$(document).on('click', '[data-datagrid-confirm]:not(.ajax)', function(e) {
	if (!confirm($(e.target).closest('a').attr('data-datagrid-confirm'))) {
		e.stopPropagation();
		return e.preventDefault();
	}
});

if (typeof naja !== "undefined") {
	dataGridRegisterExtension('datagrid.confirm', {
		interaction: function(settings) {
			var confirm_message;
			if (settings.nette) {
				confirm_message = settings.nette.el.data('datagrid-confirm');
				if (confirm_message) {
					return confirm(confirm_message);
				}
			}
			return true;
		}
	});
} else {
	dataGridRegisterExtension('datagrid.confirm', {
		before: function(xhr, settings) {
			var confirm_message;
			if (settings.nette) {
				confirm_message = settings.nette.el.data('datagrid-confirm');
				if (confirm_message) {
					return confirm(confirm_message);
				}
			}
			return true;
		}
	});
}


$(document).on('change', 'select[data-autosubmit-per-page]', function() {
	var button;
	button = $(this).parent().find('input[type=submit]');
	if (button.length === 0) {
		button = $(this).parent().find('button[type=submit]');
	}
	return button.click();
}).on('change', 'select[data-autosubmit]', function() {
	return dataGridSubmitForm($(this).closest('form').first());
}).on('change', 'input[data-autosubmit][data-autosubmit-change]', function(e) {
	var $this, code;
	code = e.which || e.keyCode || 0;
	clearTimeout(window.datagrid_autosubmit_timer);
	$this = $(this);
	return window.datagrid_autosubmit_timer = setTimeout((function(_this) {
		return function() {
			return dataGridSubmitForm($this.closest('form').first());
		};
	})(this), 200);
}).on('keyup', 'input[data-autosubmit]', function(e) {
	var $this, code;
	code = e.which || e.keyCode || 0;
	if ((code !== 13) && ((code >= 9 && code <= 40) || (code >= 112 && code <= 123))) {
		return;
	}
	clearTimeout(window.datagrid_autosubmit_timer);
	$this = $(this);
	return window.datagrid_autosubmit_timer = setTimeout((function(_this) {
		return function() {
			return dataGridSubmitForm($this.closest('form').first());
		};
	})(this), 200);
}).on('keydown', '.datagrid-inline-edit input', function(e) {
	var code;
	code = e.which || e.keyCode || 0;
	if (code === 13) {
		e.stopPropagation();
		e.preventDefault();
		return $(this).closest('tr').find('.col-action-inline-edit [name="inline_edit[submit]"]').click();
	}
});

$(document).on('keydown', 'input[data-datagrid-manualsubmit]', function(e) {
	var code;
	code = e.which || e.keyCode || 0;
	if (code === 13) {
		e.stopPropagation();
		e.preventDefault();
		return dataGridSubmitForm($(this).closest('form').first());
	}
});

getEventDomPath = function(e) {
	var node, path;
	if (indexOf.call(e, path) >= 0) {
		return e.path;
	}
	path = [];
	node = e.target;
	while (node !== document.body) {
		if (node === null) {
			break;
		}
		path.push(node);
		node = node.parentNode;
	}
	return path;
};

datagridShiftGroupSelection = function() {
	var last_checkbox;
	last_checkbox = null;
	return document.addEventListener('click', function(e) {
		var checkboxes_rows, current_checkbox_row, el, event, i, ie, input, j, k, last_checkbox_row, last_checkbox_tbody, len, len1, len2, ref, ref1, results, row, rows;
		ref = getEventDomPath(e);
		for (i = 0, len = ref.length; i < len; i++) {
			el = ref[i];
			if ($(el).is('.col-checkbox') && last_checkbox && e.shiftKey) {
				current_checkbox_row = $(el).closest('tr');
				last_checkbox_row = last_checkbox.closest('tr');
				last_checkbox_tbody = last_checkbox_row.closest('tbody');
				checkboxes_rows = last_checkbox_tbody.find('tr').toArray();
				if (current_checkbox_row.index() > last_checkbox_row.index()) {
					rows = checkboxes_rows.slice(last_checkbox_row.index(), current_checkbox_row.index());
				} else if (current_checkbox_row.index() < last_checkbox_row.index()) {
					rows = checkboxes_rows.slice(current_checkbox_row.index() + 1, last_checkbox_row.index());
				}
				if (!rows) {
					return;
				}
				for (j = 0, len1 = rows.length; j < len1; j++) {
					row = rows[j];
					input = $(row).find('.col-checkbox input[type=checkbox]')[0];
					if (input) {
						input.checked = true;
						ie = window.navigator.userAgent.indexOf("MSIE ");
						if (ie) {
							event = document.createEvent('Event');
							event.initEvent('change', true, true);
						} else {
							event = new Event('change', {
								'bubbles': true
							});
						}
						input.dispatchEvent(event);
					}
				}
			}
		}
		ref1 = getEventDomPath(e);
		results = [];
		for (k = 0, len2 = ref1.length; k < len2; k++) {
			el = ref1[k];
			if ($(el).is('.col-checkbox')) {
				results.push(last_checkbox = $(el));
			} else {
				results.push(void 0);
			}
		}
		return results;
	});
};

datagridShiftGroupSelection();

document.addEventListener('change', function(e) {
	var buttons, checked_inputs, counter, event, grid, i, ie, input, inputs, len, results, select, total;
	grid = e.target.getAttribute('data-check');
	if (grid) {
		checked_inputs = document.querySelectorAll('input[data-check-all-' + grid + ']:checked');
		select = document.querySelector('.datagrid-' + grid + ' select[name="group_action[group_action]"]');
		buttons = document.querySelectorAll('.datagrid-' + grid + ' input[type="submit"]');
		if (buttons.length === 0) {
			buttons = document.querySelectorAll('.datagrid-' + grid + ' button[type="submit"]');
		}
		counter = document.querySelector('.datagrid-' + grid + ' .datagrid-selected-rows-count');

		if (checked_inputs.length) {
			if (buttons) {
				buttons.forEach(function (button) {
					button.disabled = false;
				});
			}
			if (select) {
				select.disabled = false;
			}
			total = document.querySelectorAll('input[data-check-all-' + grid + ']').length;
			if (counter) {
				counter.innerHTML = checked_inputs.length + '/' + total;
			}
		} else {
			if (buttons) {
				buttons.forEach(function (button) {
					button.disabled = true;
				});
			}
			if (select) {
				select.disabled = true;
				select.value = "";
			}
			if (counter) {
				counter.innerHTML = "";
			}
		}
		ie = window.navigator.userAgent.indexOf("MSIE ");
		if (ie) {
			event = document.createEvent('Event');
			event.initEvent('change', true, true);
		} else {
			event = new Event('change', {
				'bubbles': true
			});
		}
		if (select) {
			select.dispatchEvent(event);
		}
	}
	grid = e.target.getAttribute('data-check-all');
	if (grid) {
		inputs = document.querySelectorAll('input[type=checkbox][data-check-all-' + grid + ']');
		results = [];
		for (i = 0, len = inputs.length; i < len; i++) {
			input = inputs[i];
			input.checked = e.target.checked;
			ie = window.navigator.userAgent.indexOf("MSIE ");
			if (ie) {
				event = document.createEvent('Event');
				event.initEvent('change', true, true);
			} else {
				event = new Event('change', {
					'bubbles': true
				});
			}
			results.push(input.dispatchEvent(event));
		}
		return results;
	}
});


window.datagridSerializeUrl = function(obj, prefix) {
var str = [];
for(var p in obj) {
	if (obj.hasOwnProperty(p)) {
		var k = prefix ? prefix + "[" + p + "]" : p, v = obj[p];
		if (v !== null && v !== "") {
			if (typeof v == "object") {
				var r = window.datagridSerializeUrl(v, k);
					if (r) {
						str.push(r);
					}
			} else {
				str.push(encodeURIComponent(k) + "=" + encodeURIComponent(v));
			}
		}
	}
}
return str.join("&");
}
;

datagridSortable = function() {
	if (typeof $.fn.sortable === 'undefined') {
		return;
	}
	return $('.datagrid [data-sortable]').sortable({
		handle: '.handle-sort',
		items: 'tr',
		axis: 'y',
		update: function(event, ui) {
			var component_prefix, data, item_id, next_id, prev_id, row, url;
			row = ui.item.closest('tr[data-id]');
			item_id = row.data('id');
			prev_id = null;
			next_id = null;
			if (row.prev().length) {
				prev_id = row.prev().data('id');
			}
			if (row.next().length) {
				next_id = row.next().data('id');
			}
			url = $(this).data('sortable-url');
			data = {};
			component_prefix = row.closest('.datagrid').find('tbody').attr('data-sortable-parent-path');
			data[(component_prefix + '-item_id').replace(/^-/, '')] = item_id;
			if (prev_id !== null) {
				data[(component_prefix + '-prev_id').replace(/^-/, '')] = prev_id;
			}
			if (next_id !== null) {
				data[(component_prefix + '-next_id').replace(/^-/, '')] = next_id;
			}
			return dataGridRegisterAjaxCall({
				type: 'GET',
				url: url,
				data: data,
				error: function(jqXHR, textStatus, errorThrown) {
					return alert(jqXHR.statusText);
				}
			});
		},
		helper: function(e, ui) {
			ui.children().each(function() {
				return $(this).width($(this).width());
			});
			return ui;
		}
	});
};

$(function() {
	return datagridSortable();
});

if (typeof datagridSortableTree === 'undefined') {
	datagridSortableTree = function() {
		if (typeof $('.datagrid-tree-item-children').sortable === 'undefined') {
			return;
		}
		return $('.datagrid-tree-item-children').sortable({
			handle: '.handle-sort',
			items: '.datagrid-tree-item:not(.datagrid-tree-header)',
			toleranceElement: '> .datagrid-tree-item-content',
			connectWith: '.datagrid-tree-item-children',
			update: function(event, ui) {
				var component_prefix, data, item_id, next_id, parent, parent_id, prev_id, row, url;
				$('.toggle-tree-to-delete').remove();
				row = ui.item.closest('.datagrid-tree-item[data-id]');
				item_id = row.data('id');
				prev_id = null;
				next_id = null;
				parent_id = null;
				if (row.prev().length) {
					prev_id = row.prev().data('id');
				}
				if (row.next().length) {
					next_id = row.next().data('id');
				}
				parent = row.parent().closest('.datagrid-tree-item');
				if (parent.length) {
					parent.find('.datagrid-tree-item-children').first().css({
						display: 'block'
					});
					parent.addClass('has-children');
					parent_id = parent.data('id');
				}
				url = $(this).data('sortable-url');
				if (!url) {
					return;
				}
				parent.find('[data-toggle-tree]').first().removeClass('hidden');
				component_prefix = row.closest('.datagrid-tree').attr('data-sortable-parent-path');
				data = {};
				data[(component_prefix + '-item_id').replace(/^-/, '')] = item_id;
				if (prev_id !== null) {
					data[(component_prefix + '-prev_id').replace(/^-/, '')] = prev_id;
				}
				if (next_id !== null) {
					data[(component_prefix + '-next_id').replace(/^-/, '')] = next_id;
				}
				data[(component_prefix + '-parent_id').replace(/^-/, '')] = parent_id;
				return dataGridRegisterAjaxCall({
					type: 'GET',
					url: url,
					data: data,
					error: function(jqXHR, textStatus, errorThrown) {
						if (errorThrown !== 'abort') {
							return alert(jqXHR.statusText);
						}
					}
				});
			},
			stop: function(event, ui) {
				return $('.toggle-tree-to-delete').removeClass('toggle-tree-to-delete');
			},
			start: function(event, ui) {
				var parent;
				parent = ui.item.parent().closest('.datagrid-tree-item');
				if (parent.length) {
					if (parent.find('.datagrid-tree-item').length === 2) {
						return parent.find('[data-toggle-tree]').addClass('toggle-tree-to-delete');
					}
				}
			}
		});
	};
}

$(function() {
	return datagridSortableTree();
});

dataGridRegisterExtension('datagrid.happy', {
	success: function() {
		var c, checked_rows, class_selector, classes, event, grid, grids, i, ie, input, j, len, len1, results;
		if (window.happy) {
			window.happy.reset();
		}
		grids = $('.datagrid');
		results = [];
		for (i = 0, len = grids.length; i < len; i++) {
			grid = grids[i];
			classes = grid.classList;
			class_selector = '';
			for (j = 0, len1 = classes.length; j < len1; j++) {
				c = classes[j];
				class_selector = class_selector + '.' + c;
			}
			checked_rows = document.querySelectorAll(class_selector + ' ' + 'input[data-check]:checked');
			if (checked_rows.length === 1 && checked_rows[0].getAttribute('name') === 'toggle-all') {
				input = document.querySelector(class_selector + ' input[name=toggle-all]');
				if (input) {
					input.checked = false;
					ie = window.navigator.userAgent.indexOf("MSIE ");
					if (ie) {
						event = document.createEvent('Event');
						event.initEvent('change', true, true);
					} else {
						event = new Event('change', {
							'bubbles': true
						});
					}
					results.push(input.dispatchEvent(event));
				} else {
					results.push(void 0);
				}
			} else {
				results.push(void 0);
			}
		}
		return results;
	}
});

dataGridRegisterExtension('datagrid.sortable', {
	success: function() {
		return datagridSortable();
	}
});

dataGridRegisterExtension('datagrid.forms', {
	success: function() {
		return $('.datagrid').find('form').each(function() {
			return window.Nette.initForm(this);
		});
	}
});

dataGridRegisterExtension('datagrid.url', {
	success: function(payload) {
		var host, path, query, url;
		if (payload._datagrid_url) {
			if (window.history.replaceState) {
				host = window.location.protocol + "//" + window.location.host;
				path = window.location.pathname;
				query = window.datagridSerializeUrl(payload.state).replace(/&+$/gm, '');
				if (query) {
					url = host + path + "?" + query.replace(/\&*$/, '');
				} else {
					url = host + path;
				}
				url += window.location.hash;
				if (window.location.href !== url) {
					return window.history.replaceState({
						path: url
					}, '', url);
				}
			}
		}
	}
});

dataGridRegisterExtension('datagrid.sort', {
	success: function(payload) {
		var href, key, ref, results;
		if (payload._datagrid_sort) {
			ref = payload._datagrid_sort;
			results = [];
			for (key in ref) {
				href = ref[key];
				results.push($('#datagrid-sort-' + key).attr('href', href));
			}
			return results;
		}
	}
});

dataGridRegisterExtension('datargid.item_detail', {
	before: function(xhr, settings) {
		var id, row_detail, grid_fullname;
		if (settings.nette && settings.nette.el.attr('data-toggle-detail')) {
			id = settings.nette.el.attr('data-toggle-detail');
			grid_fullname = settings.nette.el.attr('data-toggle-detail-grid-fullname');
			row_detail = $('.item-detail-' + grid_fullname + '-id-' + id);
			if (row_detail.hasClass('loaded')) {
				if (!row_detail.find('.item-detail-content').length) {
					row_detail.removeClass('toggled');
					return true;
				}
				if (row_detail.hasClass('toggled')) {
					row_detail.find('.item-detail-content').slideToggle('fast', (function(_this) {
						return function() {
							return row_detail.toggleClass('toggled');
						};
					})(this));
				} else {
					row_detail.toggleClass('toggled');
					row_detail.find('.item-detail-content').slideToggle('fast');
				}
				return false;
			} else {
				return row_detail.addClass('loaded');
			}
		}
		return true;
	},
	success: function(payload) {
		var id, row_detail, grid_fullname;
		if (payload._datagrid_toggle_detail && payload._datagrid_name) {
			id = payload._datagrid_toggle_detail;
			grid_fullname = payload._datagrid_name;
			row_detail = $('.item-detail-' + grid_fullname + '-id-' + id);
			row_detail.toggleClass('toggled');
			return row_detail.find('.item-detail-content').slideToggle('fast');
		}
	}
});

dataGridRegisterExtension('datagrid.tree', {
	before: function(xhr, settings) {
		var children_block;
		if (settings.nette && settings.nette.el.attr('data-toggle-tree')) {
			settings.nette.el.toggleClass('toggle-rotate');
			children_block = settings.nette.el.closest('.datagrid-tree-item').find('.datagrid-tree-item-children').first();
			if (children_block.hasClass('loaded')) {
				children_block.slideToggle('fast');
				return false;
			}
		}
		return true;
	},
	success: function(payload) {
		var children_block, content, id, name, ref, snippet, template;
		if (payload._datagrid_tree) {
			id = payload._datagrid_tree;
			children_block = $('.datagrid-tree-item[data-id="' + id + '"]').find('.datagrid-tree-item-children').first();
			children_block.addClass('loaded');
			ref = payload.snippets;
			for (name in ref) {
				snippet = ref[name];
				content = $(snippet);
				template = $('<div class="datagrid-tree-item" id="' + name + '">');
				template.attr('data-id', content.attr('data-id'));
				template.append(content);
				if (content.data('has-children')) {
					template.addClass('has-children');
				}
				children_block.append(template);
			}
			children_block.addClass('loaded');
			children_block.slideToggle('fast');
			dataGridLoad();
		}
		return datagridSortableTree();
	}
});

$(document).on('click', '[data-datagrid-editable-url]', function(event) {
	var attr_name, attr_value, attrs, cell, cellValue, cell_height, cell_lines, cell_padding, input, line_height, submit, valueToEdit;
	cell = $(this);
	if (event.target.tagName.toLowerCase() === 'a') {
		return;
	}
	if (cell.hasClass('datagrid-inline-edit')) {
		return;
	}
	if (!cell.hasClass('editing')) {
		cell.addClass('editing');
		cellValue = cell.html().trim().replace('<br>', '\n');
		if (cell.attr('data-datagrid-editable-value')) {
			valueToEdit = cell.data('datagrid-editable-value');
		} else {
			valueToEdit = cellValue;
		}
		cell.data('originalValue', cellValue);
		cell.data('valueToEdit', valueToEdit);
		if (cell.data('datagrid-editable-type') === 'textarea') {
			input = $('<textarea>' + valueToEdit + '</textarea>');
			cell_padding = parseInt(cell.css('padding').replace(/[^-\d\.]/g, ''), 10);
			cell_height = cell.outerHeight();
			line_height = Math.round(parseFloat(cell.css('line-height')));
			cell_lines = (cell_height - (2 * cell_padding)) / line_height;
			input.attr('rows', Math.round(cell_lines));
		} else if (cell.data('datagrid-editable-type') === 'select') {
			input = $(cell.data('datagrid-editable-element'));
			input.find("option[value='" + valueToEdit + "']").prop('selected', true);
		} else {
			input = $('<input type="' + cell.data('datagrid-editable-type') + '">');
			input.val(valueToEdit);
		}
		attrs = cell.data('datagrid-editable-attrs');
		for (attr_name in attrs) {
			attr_value = attrs[attr_name];
			input.attr(attr_name, attr_value);
		}
		cell.removeClass('edited');
		cell.html(input);
		submit = function(cell, el) {
			var value;
			value = el.val();
			if (value !== cell.data('valueToEdit')) {
				dataGridRegisterAjaxCall({
					url: cell.data('datagrid-editable-url'),
					data: {
						value: value
					},
					type: 'POST',
					success: function(payload) {
						if (cell.data('datagrid-editable-type') === 'select') {
							cell.html(input.find("option[value='" + value + "']").html());
						} else {
							if (payload._datagrid_editable_new_value) {
								value = payload._datagrid_editable_new_value;
							}
							cell.html(value);
						}
						return cell.addClass('edited');
					},
					error: function() {
						cell.html(cell.data('originalValue'));
						return cell.addClass('edited-error');
					}
				});
			} else {
				cell.html(cell.data('originalValue'));
			}
			return setTimeout(function() {
				return cell.removeClass('editing');
			}, 1200);
		};
		cell.find('input,textarea,select').focus().on('blur', function() {
			return submit(cell, $(this));
		}).on('keydown', function(e) {
			if (cell.data('datagrid-editable-type') !== 'textarea') {
				if (e.which === 13) {
					e.stopPropagation();
					e.preventDefault();
					return submit(cell, $(this));
				}
			}
			if (e.which === 27) {
				e.stopPropagation();
				e.preventDefault();
				cell.removeClass('editing');
				return cell.html(cell.data('originalValue'));
			}
		});
		return cell.find('select').on('change', function() {
			return submit(cell, $(this));
		});
	}
});

dataGridRegisterExtension('datagrid.after_inline_edit', {
	success: function(payload) {
		var grid = $('.datagrid-' + payload._datagrid_name);

		if (payload._datagrid_inline_edited) {
			grid.find('tr[data-id=' + payload._datagrid_inline_edited + '] > td').addClass('edited');
			return grid.find('.datagrid-inline-edit-trigger').removeClass('hidden');
		} else if (payload._datagrid_inline_edit_cancel) {
			return grid.find('.datagrid-inline-edit-trigger').removeClass('hidden');
		}
	}
});

$(document).on('mouseup', '[data-datagrid-cancel-inline-add]', function(e) {
	var code = e.which || e.keyCode || 0;
	if (code === 1) {
		e.stopPropagation();
		e.preventDefault();
		return $('.datagrid-row-inline-add').addClass('datagrid-row-inline-add-hidden');
	}
});

dataGridRegisterExtension('datagrid-toggle-inline-add', {
	success: function(payload) {
		var grid = $('.datagrid-' + payload._datagrid_name);

		if (payload._datagrid_inline_adding) {
			var row = grid.find('.datagrid-row-inline-add');

			if (row.hasClass('datagrid-row-inline-add-hidden')) {
				row.removeClass('datagrid-row-inline-add-hidden');
			}

			row.find('input:not([readonly]),textarea:not([readonly])').first().focus();
		}
	}
});

datagridFitlerMultiSelect = function() {
	var select = $('.selectpicker').first();

	if ($.fn.selectpicker) {
		return $.fn.selectpicker.defaults = {
			countSelectedText: select.data('i18n-selected'),
			iconBase: '',
			tickIcon: select.data('selected-icon-check')
		};
	}
};

$(function() {
	return datagridFitlerMultiSelect();
});

datagridGroupActionMultiSelect = function() {
	var selects;

	if (!$.fn.selectpicker) {
		return;
	}

	selects = $('[data-datagrid-multiselect-id]');

	return selects.each(function() {
		var id;
		if ($(this).hasClass('selectpicker')) {
			$(this).removeAttr('id');
			id = $(this).data('datagrid-multiselect-id');
			$(this).on('loaded.bs.select', function(e) {
				$(this).parent().attr('style', 'display:none;');
				return $(this).parent().find('.hidden').removeClass('hidden').addClass('btn-default btn-secondary');
			});
			return $(this).on('rendered.bs.select', function(e) {
				return $(this).parent().attr('id', id);
			});
		}
	});
};

$(function() {
	return datagridGroupActionMultiSelect();
});

dataGridRegisterExtension('datagrid.fitlerMultiSelect', {
	success: function() {
		datagridFitlerMultiSelect();
		if ($.fn.selectpicker) {
			return $('.selectpicker').selectpicker({
				iconBase: 'fa'
			});
		}
	}
});

dataGridRegisterExtension('datagrid.groupActionMultiSelect', {
	success: function() {
		return datagridGroupActionMultiSelect();
	}
});

dataGridRegisterExtension('datagrid.inline-editing', {
	success: function(payload) {
		var grid;
		if (payload._datagrid_inline_editing) {
			grid = $('.datagrid-' + payload._datagrid_name);
			return grid.find('.datagrid-inline-edit-trigger').addClass('hidden');
		}
	}
});

dataGridRegisterExtension('datagrid.redraw-item', {
	success: function(payload) {
		var row;
		if (payload._datagrid_redraw_item_class) {
			row = $('tr[data-id=' + payload._datagrid_redraw_item_id + ']');
			return row.attr('class', payload._datagrid_redraw_item_class);
		}
	}
});

dataGridRegisterExtension('datagrid.reset-filter-by-column', {
	success: function(payload) {
		var grid, href, i, key, len, ref;
		if (!payload._datagrid_name) {
			return;
		}
		grid = $('.datagrid-' + payload._datagrid_name);
		grid.find('[data-datagrid-reset-filter-by-column]').addClass('hidden');
		if (payload.non_empty_filters && payload.non_empty_filters.length) {
			ref = payload.non_empty_filters;
			for (i = 0, len = ref.length; i < len; i++) {
				key = ref[i];
				grid.find('[data-datagrid-reset-filter-by-column=' + key + ']').removeClass('hidden');
			}
			href = grid.find('.reset-filter').attr('href');
			return grid.find('[data-datagrid-reset-filter-by-column]').each(function() {
				var new_href;
				key = $(this).attr('data-datagrid-reset-filter-by-column');
				new_href = href.replace('do=' + payload._datagrid_name + '-resetFilter', 'do=' + payload._datagrid_name + '-resetColumnFilter');
				new_href += '&' + payload._datagrid_name + '-key=' + key;
				return $(this).attr('href', new_href);
			});
		}
	}
});


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVuZG9ycy1ub2RlX21vZHVsZXNfdWJsYWJvby1kYXRhZ3JpZF9hc3NldHNfZGF0YWdyaWQtaW5zdGFudC11cmwtcmVmcmVzaF9qcy1ub2RlX21vZHVsZXNfdWJsLTk0MzMzMy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7O0FBRUEsV0FBVyxJQUFJO0FBQ2Y7QUFDQTtBQUNBOztBQUVBLEVBQUUsSUFBSTtBQUNOO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQSxFQUFFO0FBQ0Y7QUFDQSxHQUFHLENBQUM7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDOzs7Ozs7Ozs7Ozs7O0FDN0JEOztBQUVBLFdBQVcsSUFBSTtBQUNmLDZCQUE2QixPQUFPLElBQUksSUFBSSxJQUFJLFlBQVksSUFBSTtBQUNoRSwyQ0FBMkM7QUFDM0MsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047O0FBRUE7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUcsSUFBSTtBQUNQLElBQUk7QUFDSixHQUFHLElBQUk7QUFDUDtBQUNBO0FBQ0EsRUFBRSxTQUFTLENBQUM7QUFDWjtBQUNBLEdBQUcsQ0FBQztBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQixDQUFDO0FBQ3ZCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGlCQUFpQixDQUFDO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7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QUM7QUFDWixJQUFJO0FBQ0osVUFBVSxDQUFDO0FBQ1gsV0FBVyxDQUFDO0FBQ1osSUFBSTtBQUNKO0FBQ0EsRUFBRTtBQUNGOztBQUVBLENBQUM7QUFDRDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsTUFBTSxDQUFDO0FBQ1AsVUFBVSxDQUFDO0FBQ1g7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxDQUFDO0FBQ1g7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsQ0FBQztBQUNWO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxDQUFDO0FBQ1Y7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLFNBQVM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxDQUFDO0FBQ1g7QUFDQTtBQUNBLFdBQVcsQ0FBQztBQUNaLElBQUk7QUFDSjtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91YmxhYm9vLWRhdGFncmlkL2Fzc2V0cy9kYXRhZ3JpZC1pbnN0YW50LXVybC1yZWZyZXNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy91YmxhYm9vLWRhdGFncmlkL2Fzc2V0cy9kYXRhZ3JpZC1zcGlubmVycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdWJsYWJvby1kYXRhZ3JpZC9hc3NldHMvZGF0YWdyaWQuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGRhdGFHcmlkUmVnaXN0ZXJBamF4Q2FsbDtcblxuaWYgKHR5cGVvZiBuYWphICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdGRhdGFHcmlkUmVnaXN0ZXJBamF4Q2FsbCA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcblx0XHR2YXIgbWV0aG9kID0gcGFyYW1zLnR5cGUgfHwgJ0dFVCc7XG5cdFx0dmFyIGRhdGEgPSBwYXJhbXMuZGF0YSB8fCBudWxsO1xuXG5cdFx0bmFqYS5tYWtlUmVxdWVzdChtZXRob2QsIHBhcmFtcy51cmwsIGRhdGEsIHtcblx0XHRcdGhpc3Rvcnk6ICdyZXBsYWNlJ1xuXHRcdH0pXG5cdFx0XHQudGhlbihwYXJhbXMuc3VjY2Vzcylcblx0XHRcdC5jYXRjaChwYXJhbXMuZXJyb3IpO1xuXHR9O1xuXG59IGVsc2Uge1xuXHRcdGRhdGFHcmlkUmVnaXN0ZXJBamF4Q2FsbCA9IGZ1bmN0aW9uIChwYXJhbXMpIHtcblx0XHRcdCQubmV0dGUuYWpheChwYXJhbXMpO1xuXHRcdH07XG59XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoKSB7XG5cdHZhciBlbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRhdGFncmlkJyk7XG5cblx0aWYgKGVsZW1lbnQgIT09IG51bGwpIHtcblx0XHRyZXR1cm4gZGF0YUdyaWRSZWdpc3RlckFqYXhDYWxsKHtcblx0XHRcdHR5cGU6ICdHRVQnLFxuXHRcdFx0dXJsOiBlbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1yZWZyZXNoLXN0YXRlJylcblx0XHR9KTtcblx0fVxufSk7XG4iLCJ2YXIgZGF0YUdyaWRSZWdpc3RlckV4dGVuc2lvbjtcblxuaWYgKHR5cGVvZiBuYWphICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdHZhciBpc05hamEyID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmFqYSAmJiBuYWphLlZFUlNJT04gJiYgbmFqYS5WRVJTSU9OID49IDIgfTtcblx0dmFyIG5hamFFdmVudFBhcmFtcyA9IGZ1bmN0aW9uIChwYXJhbXMpIHsgcmV0dXJuIGlzTmFqYTIoKSA/IHBhcmFtcy5kZXRhaWwgOiBwYXJhbXMgfTtcblx0dmFyIG5hamFSZXF1ZXN0ID0gZnVuY3Rpb24gKHBhcmFtcykgeyByZXR1cm4gaXNOYWphMigpID8gcGFyYW1zLmRldGFpbC5yZXF1ZXN0IDogcGFyYW1zLnhociB9O1xuXHRkYXRhR3JpZFJlZ2lzdGVyRXh0ZW5zaW9uID0gZnVuY3Rpb24gKG5hbWUsIGV4dGVuc2lvbikge1xuXHRcdHZhciBpbml0ID0gZXh0ZW5zaW9uLmluaXQ7XG5cdFx0dmFyIHN1Y2Nlc3MgPSBleHRlbnNpb24uc3VjY2Vzcztcblx0XHR2YXIgYmVmb3JlID0gZXh0ZW5zaW9uLmJlZm9yZTtcblx0XHR2YXIgY29tcGxldGUgPSBleHRlbnNpb24uY29tcGxldGU7XG5cblxuXHRcdHZhciBOZXdFeHRlbnNpb24gPSBmdW5jdGlvbiBOZXdFeHRlbnNpb24obmFqYSwgbmFtZSkge1xuXHRcdFx0dGhpcy5uYW1lID0gbmFtZTtcblxuXHRcdFx0dGhpcy5pbml0aWFsaXplID0gZnVuY3Rpb24gKG5hamEpIHtcblx0XHRcdFx0aWYoaW5pdCkge1xuXHRcdFx0XHRcdG5hamEuYWRkRXZlbnRMaXN0ZW5lcignaW5pdCcsIGZ1bmN0aW9uIChwYXJhbXMpICB7XG5cdFx0XHRcdFx0XHRpbml0KG5hamFFdmVudFBhcmFtcyhwYXJhbXMpLmRlZmF1bHRPcHRpb25zKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmKHN1Y2Nlc3MpIHtcblx0XHRcdFx0XHRuYWphLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Y2Nlc3MnLCBmdW5jdGlvbiAocGFyYW1zKSAge1xuXHRcdFx0XHRcdFx0dmFyIHBheWxvYWQgPSBpc05hamEyKCkgPyBwYXJhbXMuZGV0YWlsLnBheWxvYWQgOiBwYXJhbXMucmVzcG9uc2U7XG5cdFx0XHRcdFx0XHRzdWNjZXNzKHBheWxvYWQsIG5hamFFdmVudFBhcmFtcyhwYXJhbXMpLm9wdGlvbnMpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoYmVmb3JlKSB7XG5cdFx0XHRcdFx0bmFqYS5hZGRFdmVudExpc3RlbmVyKCdiZWZvcmUnLCBmdW5jdGlvbiAocGFyYW1zKSB7XG5cdFx0XHRcdFx0XHRiZWZvcmUobmFqYVJlcXVlc3QocGFyYW1zKSwgbmFqYUV2ZW50UGFyYW1zKHBhcmFtcykub3B0aW9ucyk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZihjb21wbGV0ZSkge1xuXHRcdFx0XHRcdG5hamEuYWRkRXZlbnRMaXN0ZW5lcignY29tcGxldGUnLCBmdW5jdGlvbiAocGFyYW1zKSB7XG5cdFx0XHRcdFx0XHRjb21wbGV0ZShuYWphUmVxdWVzdChwYXJhbXMpLCBuYWphRXZlbnRQYXJhbXMocGFyYW1zKS5vcHRpb25zKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCFpc05hamEyKCkpIHtcblx0XHRcdFx0dGhpcy5pbml0aWFsaXplKG5hamEpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0aWYgKGlzTmFqYTIoKSkge1xuXHRcdFx0bmFqYS5yZWdpc3RlckV4dGVuc2lvbihuZXcgTmV3RXh0ZW5zaW9uKG51bGwsIG5hbWUpKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bmFqYS5yZWdpc3RlckV4dGVuc2lvbihOZXdFeHRlbnNpb24sIG5hbWUpO1xuXHRcdH1cblx0fTtcbn0gZWxzZSBpZiAoJC5uZXR0ZSkge1xuXHRcdGRhdGFHcmlkUmVnaXN0ZXJFeHRlbnNpb24gPSBmdW5jdGlvbiAobmFtZSwgZXh0ZW5zaW9uKSB7XG5cdFx0XHQkLm5ldHRlLmV4dChuYW1lLCBleHRlbnNpb24pO1xuXHRcdH07XG59XG5cbmRhdGFHcmlkUmVnaXN0ZXJFeHRlbnNpb24oJ3VibGFib28tc3Bpbm5lcnMnLCB7XG5cdGJlZm9yZTogZnVuY3Rpb24oeGhyLCBzZXR0aW5ncykge1xuXHRcdHZhciBlbCwgaWQsIHJvd19kZXRhaWwsIHNwaW5uZXJfdGVtcGxhdGUsIGdyaWRfZnVsbG5hbWU7XG5cdFx0aWYgKHNldHRpbmdzLm5ldHRlKSB7XG5cdFx0XHRlbCA9IHNldHRpbmdzLm5ldHRlLmVsO1xuXHRcdFx0c3Bpbm5lcl90ZW1wbGF0ZSA9ICQoJzxkaXYgY2xhc3M9XCJ1YmxhYm9vLXNwaW5uZXIgdWJsYWJvby1zcGlubmVyLXNtYWxsXCI+PGk+PC9pPjxpPjwvaT48aT48L2k+PGk+PC9pPjwvZGl2PicpO1xuXHRcdFx0aWYgKGVsLmlzKCcuZGF0YWdyaWQgW25hbWU9XCJncm91cF9hY3Rpb25bc3VibWl0XVwiXScpKSB7XG5cdFx0XHRcdHJldHVybiBlbC5hZnRlcihzcGlubmVyX3RlbXBsYXRlKTtcblx0XHRcdH0gZWxzZSBpZiAoZWwuaXMoJy5kYXRhZ3JpZCBhJykgJiYgZWwuZGF0YSgndG9nZ2xlLWRldGFpbCcpKSB7XG5cdFx0XHRcdGlkID0gc2V0dGluZ3MubmV0dGUuZWwuYXR0cignZGF0YS10b2dnbGUtZGV0YWlsJyk7XG5cdFx0XHRcdGdyaWRfZnVsbG5hbWUgPSBzZXR0aW5ncy5uZXR0ZS5lbC5hdHRyKCdkYXRhLXRvZ2dsZS1kZXRhaWwtZ3JpZC1mdWxsbmFtZScpO1xuXHRcdFx0XHRyb3dfZGV0YWlsID0gJCgnLml0ZW0tZGV0YWlsLScgKyBncmlkX2Z1bGxuYW1lICsgJy1pZC0nICsgaWQpO1xuXHRcdFx0XHRpZiAoIXJvd19kZXRhaWwuaGFzQ2xhc3MoJ2xvYWRlZCcpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGVsLmFkZENsYXNzKCd1YmxhYm9vLXNwaW5uZXItaWNvbicpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGVsLmlzKCcuZGF0YWdyaWQgLmNvbC1wYWdpbmF0aW9uIGEnKSkge1xuXHRcdFx0XHRyZXR1cm4gZWwuY2xvc2VzdCgnLnJvdy1ncmlkLWJvdHRvbScpLmZpbmQoJy5jb2wtcGVyLXBhZ2UnKS5wcmVwZW5kKHNwaW5uZXJfdGVtcGxhdGUpO1xuXHRcdFx0fSBlbHNlIGlmIChlbC5pcygnLmRhdGFncmlkIC5kYXRhZ3JpZC1wZXItcGFnZS1zdWJtaXQnKSkge1xuXHRcdFx0XHRyZXR1cm4gZWwuY2xvc2VzdCgnLnJvdy1ncmlkLWJvdHRvbScpLmZpbmQoJy5jb2wtcGVyLXBhZ2UnKS5wcmVwZW5kKHNwaW5uZXJfdGVtcGxhdGUpO1xuXHRcdFx0fSBlbHNlIGlmIChlbC5pcygnLmRhdGFncmlkIC5yZXNldC1maWx0ZXInKSkge1xuXHRcdFx0XHRyZXR1cm4gZWwuY2xvc2VzdCgnLnJvdy1ncmlkLWJvdHRvbScpLmZpbmQoJy5jb2wtcGVyLXBhZ2UnKS5wcmVwZW5kKHNwaW5uZXJfdGVtcGxhdGUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0Y29tcGxldGU6IGZ1bmN0aW9uKCkge1xuXHRcdCQoJy51YmxhYm9vLXNwaW5uZXInKS5yZW1vdmUoKTtcblx0XHRyZXR1cm4gJCgnLnVibGFib28tc3Bpbm5lci1pY29uJykucmVtb3ZlQ2xhc3MoJ3VibGFib28tc3Bpbm5lci1pY29uJyk7XG5cdH1cbn0pO1xuIiwidmFyIGRhdGFHcmlkUmVnaXN0ZXJFeHRlbnNpb24sIGRhdGFHcmlkUmVnaXN0ZXJBamF4Q2FsbCwgZGF0YUdyaWRMb2FkLCBkYXRhR3JpZFN1Ym1pdEZvcm07XG5cbmlmICh0eXBlb2YgbmFqYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuXHR2YXIgaXNOYWphMiA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hamEgJiYgbmFqYS5WRVJTSU9OICYmIG5hamEuVkVSU0lPTiA+PSAyIH07XG5cdHZhciBuYWphRXZlbnRQYXJhbXMgPSBmdW5jdGlvbiAocGFyYW1zKSB7IHJldHVybiBpc05hamEyKCkgPyBwYXJhbXMuZGV0YWlsIDogcGFyYW1zIH07XG5cdHZhciBuYWphUmVxdWVzdCA9IGZ1bmN0aW9uIChwYXJhbXMpIHsgcmV0dXJuIGlzTmFqYTIoKSA/IHBhcmFtcy5kZXRhaWwucmVxdWVzdCA6IHBhcmFtcy54aHIgfTtcblx0ZGF0YUdyaWRSZWdpc3RlckV4dGVuc2lvbiA9IGZ1bmN0aW9uIChuYW1lLCBleHRlbnNpb24pIHtcblx0XHR2YXIgaW5pdCA9IGV4dGVuc2lvbi5pbml0O1xuXHRcdHZhciBzdWNjZXNzID0gZXh0ZW5zaW9uLnN1Y2Nlc3M7XG5cdFx0dmFyIGJlZm9yZSA9IGV4dGVuc2lvbi5iZWZvcmU7XG5cdFx0dmFyIGNvbXBsZXRlID0gZXh0ZW5zaW9uLmNvbXBsZXRlO1xuXHRcdHZhciBpbnRlcmFjdGlvbiA9IGV4dGVuc2lvbi5pbnRlcmFjdGlvbjtcblxuXG5cdFx0dmFyIE5ld0V4dGVuc2lvbiA9IGZ1bmN0aW9uIE5ld0V4dGVuc2lvbihuYWphLCBuYW1lKSB7XG5cdFx0XHR0aGlzLm5hbWUgPSBuYW1lO1xuXG5cdFx0XHR0aGlzLmluaXRpYWxpemUgPSBmdW5jdGlvbiAobmFqYSkge1xuXHRcdFx0XHRpZihpbml0KSB7XG5cdFx0XHRcdFx0bmFqYS5hZGRFdmVudExpc3RlbmVyKCdpbml0JywgZnVuY3Rpb24gKHBhcmFtcykgIHtcblx0XHRcdFx0XHRcdGluaXQobmFqYUV2ZW50UGFyYW1zKHBhcmFtcykuZGVmYXVsdE9wdGlvbnMpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoc3VjY2Vzcykge1xuXHRcdFx0XHRcdG5hamEuYWRkRXZlbnRMaXN0ZW5lcignc3VjY2VzcycsIGZ1bmN0aW9uIChwYXJhbXMpICB7XG5cdFx0XHRcdFx0XHR2YXIgcGF5bG9hZCA9IGlzTmFqYTIoKSA/IHBhcmFtcy5kZXRhaWwucGF5bG9hZCA6IHBhcmFtcy5yZXNwb25zZTtcblx0XHRcdFx0XHRcdHN1Y2Nlc3MocGF5bG9hZCwgbmFqYUV2ZW50UGFyYW1zKHBhcmFtcykub3B0aW9ucyk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgaW50ZXJhY3Rpb25UYXJnZXQgPSBuYWphO1xuXHRcdFx0XHRpZiAoaXNOYWphMigpKSB7XG5cdFx0XHRcdFx0aW50ZXJhY3Rpb25UYXJnZXQgPSBpbnRlcmFjdGlvblRhcmdldC51aUhhbmRsZXI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpbnRlcmFjdGlvblRhcmdldC5hZGRFdmVudExpc3RlbmVyKCdpbnRlcmFjdGlvbicsIGZ1bmN0aW9uIChwYXJhbXMpIHtcblx0XHRcdFx0XHRpZiAoaXNOYWphMigpKSB7XG5cdFx0XHRcdFx0XHRwYXJhbXMuZGV0YWlsLm9wdGlvbnMubmV0dGUgPSB7XG5cdFx0XHRcdFx0XHRcdGVsOiAkKHBhcmFtcy5kZXRhaWwuZWxlbWVudClcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cGFyYW1zLm9wdGlvbnMubmV0dGUgPSB7XG5cdFx0XHRcdFx0XHRcdGVsOiAkKHBhcmFtcy5lbGVtZW50KVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoaW50ZXJhY3Rpb24pIHtcblx0XHRcdFx0XHRcdGlmICghaW50ZXJhY3Rpb24obmFqYUV2ZW50UGFyYW1zKHBhcmFtcykub3B0aW9ucykpe1xuXHRcdFx0XHRcdFx0XHRwYXJhbXMucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGlmKGJlZm9yZSkge1xuXHRcdFx0XHRcdG5hamEuYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JlJywgZnVuY3Rpb24gKHBhcmFtcykge1xuXHRcdFx0XHRcdFx0aWYgKCFiZWZvcmUobmFqYVJlcXVlc3QocGFyYW1zKSwgbmFqYUV2ZW50UGFyYW1zKHBhcmFtcykub3B0aW9ucykpXG5cdFx0XHRcdFx0XHRcdHBhcmFtcy5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYoY29tcGxldGUpIHtcblx0XHRcdFx0XHRuYWphLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBsZXRlJywgZnVuY3Rpb24gKHBhcmFtcykge1xuXHRcdFx0XHRcdFx0Y29tcGxldGUobmFqYVJlcXVlc3QocGFyYW1zKSwgbmFqYUV2ZW50UGFyYW1zKHBhcmFtcykub3B0aW9ucyk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGlmICghaXNOYWphMigpKSB7XG5cdFx0XHRcdHRoaXMuaW5pdGlhbGl6ZShuYWphKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdGlmIChpc05hamEyKCkpIHtcblx0XHRcdG5hamEucmVnaXN0ZXJFeHRlbnNpb24obmV3IE5ld0V4dGVuc2lvbihudWxsLCBuYW1lKSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG5hamEucmVnaXN0ZXJFeHRlbnNpb24oTmV3RXh0ZW5zaW9uLCBuYW1lKTtcblx0XHR9XG5cdH07XG5cblxuXHRkYXRhR3JpZFJlZ2lzdGVyQWpheENhbGwgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgICAgIHZhciBtZXRob2QgPSBwYXJhbXMudHlwZSB8fCAnR0VUJztcbiAgICAgICAgdmFyIGRhdGEgPSBwYXJhbXMuZGF0YSB8fCBudWxsO1xuXG5cdFx0bmFqYS5tYWtlUmVxdWVzdChtZXRob2QsIHBhcmFtcy51cmwsIGRhdGEsIHt9KVxuXHRcdFx0LnRoZW4ocGFyYW1zLnN1Y2Nlc3MpXG5cdFx0XHQuY2F0Y2gocGFyYW1zLmVycm9yKTtcblx0fTtcblxuXHRkYXRhR3JpZExvYWQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0bmFqYS5sb2FkKCk7XG5cdH07XG5cblx0ZGF0YUdyaWRTdWJtaXRGb3JtID0gZnVuY3Rpb24gKGZvcm0pIHtcblx0XHRyZXR1cm4gbmFqYS51aUhhbmRsZXIuc3VibWl0Rm9ybShmb3JtLmdldCgwKSk7XG5cdH07XG59IGVsc2UgaWYgKCQubmV0dGUpIHtcblx0ZGF0YUdyaWRSZWdpc3RlckV4dGVuc2lvbiA9IGZ1bmN0aW9uIChuYW1lLCBleHRlbnNpb24pIHtcblx0XHQkLm5ldHRlLmV4dChuYW1lLCBleHRlbnNpb24pO1xuXHR9O1xuXHRkYXRhR3JpZFJlZ2lzdGVyQWpheENhbGwgPSBmdW5jdGlvbiAocGFyYW1zKSB7XG5cdFx0JC5uZXR0ZS5hamF4KHBhcmFtcyk7XG5cdH07XG5cdGRhdGFHcmlkTG9hZCA9IGZ1bmN0aW9uICgpIHtcblx0XHQkLm5ldHRlLmxvYWQoKTtcblx0fTtcblx0ZGF0YUdyaWRTdWJtaXRGb3JtID0gZnVuY3Rpb24gKGZvcm0pIHtcblx0XHRyZXR1cm4gZm9ybS5zdWJtaXQoKTtcblx0fTtcbn0gZWxzZSB7XG5cdHRocm93IG5ldyBFcnJvcihcIkluY2x1ZGUgTmFqYS5qcyBvciBuZXR0ZS5hamF4IGZvciBkYXRhZ3JpZHMgdG8gd29yayFcIilcbn1cblxuXG52YXIgZGF0YWdyaWRGaXRsZXJNdWx0aVNlbGVjdCwgZGF0YWdyaWRHcm91cEFjdGlvbk11bHRpU2VsZWN0LCBkYXRhZ3JpZFNoaWZ0R3JvdXBTZWxlY3Rpb24sIGRhdGFncmlkU29ydGFibGUsIGRhdGFncmlkU29ydGFibGVUcmVlLCBnZXRFdmVudERvbVBhdGgsXG5cdGluZGV4T2YgPSBbXS5pbmRleE9mIHx8IGZ1bmN0aW9uKGl0ZW0pIHsgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLmxlbmd0aDsgaSA8IGw7IGkrKykgeyBpZiAoaSBpbiB0aGlzICYmIHRoaXNbaV0gPT09IGl0ZW0pIHJldHVybiBpOyB9IHJldHVybiAtMTsgfTtcblxuJChkb2N1bWVudCkub24oJ2NsaWNrJywgJ1tkYXRhLWRhdGFncmlkLWNvbmZpcm1dOm5vdCguYWpheCknLCBmdW5jdGlvbihlKSB7XG5cdGlmICghY29uZmlybSgkKGUudGFyZ2V0KS5jbG9zZXN0KCdhJykuYXR0cignZGF0YS1kYXRhZ3JpZC1jb25maXJtJykpKSB7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRyZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHR9XG59KTtcblxuaWYgKHR5cGVvZiBuYWphICE9PSBcInVuZGVmaW5lZFwiKSB7XG5cdGRhdGFHcmlkUmVnaXN0ZXJFeHRlbnNpb24oJ2RhdGFncmlkLmNvbmZpcm0nLCB7XG5cdFx0aW50ZXJhY3Rpb246IGZ1bmN0aW9uKHNldHRpbmdzKSB7XG5cdFx0XHR2YXIgY29uZmlybV9tZXNzYWdlO1xuXHRcdFx0aWYgKHNldHRpbmdzLm5ldHRlKSB7XG5cdFx0XHRcdGNvbmZpcm1fbWVzc2FnZSA9IHNldHRpbmdzLm5ldHRlLmVsLmRhdGEoJ2RhdGFncmlkLWNvbmZpcm0nKTtcblx0XHRcdFx0aWYgKGNvbmZpcm1fbWVzc2FnZSkge1xuXHRcdFx0XHRcdHJldHVybiBjb25maXJtKGNvbmZpcm1fbWVzc2FnZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblx0fSk7XG59IGVsc2Uge1xuXHRkYXRhR3JpZFJlZ2lzdGVyRXh0ZW5zaW9uKCdkYXRhZ3JpZC5jb25maXJtJywge1xuXHRcdGJlZm9yZTogZnVuY3Rpb24oeGhyLCBzZXR0aW5ncykge1xuXHRcdFx0dmFyIGNvbmZpcm1fbWVzc2FnZTtcblx0XHRcdGlmIChzZXR0aW5ncy5uZXR0ZSkge1xuXHRcdFx0XHRjb25maXJtX21lc3NhZ2UgPSBzZXR0aW5ncy5uZXR0ZS5lbC5kYXRhKCdkYXRhZ3JpZC1jb25maXJtJyk7XG5cdFx0XHRcdGlmIChjb25maXJtX21lc3NhZ2UpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29uZmlybShjb25maXJtX21lc3NhZ2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cdH0pO1xufVxuXG5cbiQoZG9jdW1lbnQpLm9uKCdjaGFuZ2UnLCAnc2VsZWN0W2RhdGEtYXV0b3N1Ym1pdC1wZXItcGFnZV0nLCBmdW5jdGlvbigpIHtcblx0dmFyIGJ1dHRvbjtcblx0YnV0dG9uID0gJCh0aGlzKS5wYXJlbnQoKS5maW5kKCdpbnB1dFt0eXBlPXN1Ym1pdF0nKTtcblx0aWYgKGJ1dHRvbi5sZW5ndGggPT09IDApIHtcblx0XHRidXR0b24gPSAkKHRoaXMpLnBhcmVudCgpLmZpbmQoJ2J1dHRvblt0eXBlPXN1Ym1pdF0nKTtcblx0fVxuXHRyZXR1cm4gYnV0dG9uLmNsaWNrKCk7XG59KS5vbignY2hhbmdlJywgJ3NlbGVjdFtkYXRhLWF1dG9zdWJtaXRdJywgZnVuY3Rpb24oKSB7XG5cdHJldHVybiBkYXRhR3JpZFN1Ym1pdEZvcm0oJCh0aGlzKS5jbG9zZXN0KCdmb3JtJykuZmlyc3QoKSk7XG59KS5vbignY2hhbmdlJywgJ2lucHV0W2RhdGEtYXV0b3N1Ym1pdF1bZGF0YS1hdXRvc3VibWl0LWNoYW5nZV0nLCBmdW5jdGlvbihlKSB7XG5cdHZhciAkdGhpcywgY29kZTtcblx0Y29kZSA9IGUud2hpY2ggfHwgZS5rZXlDb2RlIHx8IDA7XG5cdGNsZWFyVGltZW91dCh3aW5kb3cuZGF0YWdyaWRfYXV0b3N1Ym1pdF90aW1lcik7XG5cdCR0aGlzID0gJCh0aGlzKTtcblx0cmV0dXJuIHdpbmRvdy5kYXRhZ3JpZF9hdXRvc3VibWl0X3RpbWVyID0gc2V0VGltZW91dCgoZnVuY3Rpb24oX3RoaXMpIHtcblx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gZGF0YUdyaWRTdWJtaXRGb3JtKCR0aGlzLmNsb3Nlc3QoJ2Zvcm0nKS5maXJzdCgpKTtcblx0XHR9O1xuXHR9KSh0aGlzKSwgMjAwKTtcbn0pLm9uKCdrZXl1cCcsICdpbnB1dFtkYXRhLWF1dG9zdWJtaXRdJywgZnVuY3Rpb24oZSkge1xuXHR2YXIgJHRoaXMsIGNvZGU7XG5cdGNvZGUgPSBlLndoaWNoIHx8IGUua2V5Q29kZSB8fCAwO1xuXHRpZiAoKGNvZGUgIT09IDEzKSAmJiAoKGNvZGUgPj0gOSAmJiBjb2RlIDw9IDQwKSB8fCAoY29kZSA+PSAxMTIgJiYgY29kZSA8PSAxMjMpKSkge1xuXHRcdHJldHVybjtcblx0fVxuXHRjbGVhclRpbWVvdXQod2luZG93LmRhdGFncmlkX2F1dG9zdWJtaXRfdGltZXIpO1xuXHQkdGhpcyA9ICQodGhpcyk7XG5cdHJldHVybiB3aW5kb3cuZGF0YWdyaWRfYXV0b3N1Ym1pdF90aW1lciA9IHNldFRpbWVvdXQoKGZ1bmN0aW9uKF90aGlzKSB7XG5cdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGRhdGFHcmlkU3VibWl0Rm9ybSgkdGhpcy5jbG9zZXN0KCdmb3JtJykuZmlyc3QoKSk7XG5cdFx0fTtcblx0fSkodGhpcyksIDIwMCk7XG59KS5vbigna2V5ZG93bicsICcuZGF0YWdyaWQtaW5saW5lLWVkaXQgaW5wdXQnLCBmdW5jdGlvbihlKSB7XG5cdHZhciBjb2RlO1xuXHRjb2RlID0gZS53aGljaCB8fCBlLmtleUNvZGUgfHwgMDtcblx0aWYgKGNvZGUgPT09IDEzKSB7XG5cdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0cmV0dXJuICQodGhpcykuY2xvc2VzdCgndHInKS5maW5kKCcuY29sLWFjdGlvbi1pbmxpbmUtZWRpdCBbbmFtZT1cImlubGluZV9lZGl0W3N1Ym1pdF1cIl0nKS5jbGljaygpO1xuXHR9XG59KTtcblxuJChkb2N1bWVudCkub24oJ2tleWRvd24nLCAnaW5wdXRbZGF0YS1kYXRhZ3JpZC1tYW51YWxzdWJtaXRdJywgZnVuY3Rpb24oZSkge1xuXHR2YXIgY29kZTtcblx0Y29kZSA9IGUud2hpY2ggfHwgZS5rZXlDb2RlIHx8IDA7XG5cdGlmIChjb2RlID09PSAxMykge1xuXHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdHJldHVybiBkYXRhR3JpZFN1Ym1pdEZvcm0oJCh0aGlzKS5jbG9zZXN0KCdmb3JtJykuZmlyc3QoKSk7XG5cdH1cbn0pO1xuXG5nZXRFdmVudERvbVBhdGggPSBmdW5jdGlvbihlKSB7XG5cdHZhciBub2RlLCBwYXRoO1xuXHRpZiAoaW5kZXhPZi5jYWxsKGUsIHBhdGgpID49IDApIHtcblx0XHRyZXR1cm4gZS5wYXRoO1xuXHR9XG5cdHBhdGggPSBbXTtcblx0bm9kZSA9IGUudGFyZ2V0O1xuXHR3aGlsZSAobm9kZSAhPT0gZG9jdW1lbnQuYm9keSkge1xuXHRcdGlmIChub2RlID09PSBudWxsKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdFx0cGF0aC5wdXNoKG5vZGUpO1xuXHRcdG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG5cdH1cblx0cmV0dXJuIHBhdGg7XG59O1xuXG5kYXRhZ3JpZFNoaWZ0R3JvdXBTZWxlY3Rpb24gPSBmdW5jdGlvbigpIHtcblx0dmFyIGxhc3RfY2hlY2tib3g7XG5cdGxhc3RfY2hlY2tib3ggPSBudWxsO1xuXHRyZXR1cm4gZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbihlKSB7XG5cdFx0dmFyIGNoZWNrYm94ZXNfcm93cywgY3VycmVudF9jaGVja2JveF9yb3csIGVsLCBldmVudCwgaSwgaWUsIGlucHV0LCBqLCBrLCBsYXN0X2NoZWNrYm94X3JvdywgbGFzdF9jaGVja2JveF90Ym9keSwgbGVuLCBsZW4xLCBsZW4yLCByZWYsIHJlZjEsIHJlc3VsdHMsIHJvdywgcm93cztcblx0XHRyZWYgPSBnZXRFdmVudERvbVBhdGgoZSk7XG5cdFx0Zm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRlbCA9IHJlZltpXTtcblx0XHRcdGlmICgkKGVsKS5pcygnLmNvbC1jaGVja2JveCcpICYmIGxhc3RfY2hlY2tib3ggJiYgZS5zaGlmdEtleSkge1xuXHRcdFx0XHRjdXJyZW50X2NoZWNrYm94X3JvdyA9ICQoZWwpLmNsb3Nlc3QoJ3RyJyk7XG5cdFx0XHRcdGxhc3RfY2hlY2tib3hfcm93ID0gbGFzdF9jaGVja2JveC5jbG9zZXN0KCd0cicpO1xuXHRcdFx0XHRsYXN0X2NoZWNrYm94X3Rib2R5ID0gbGFzdF9jaGVja2JveF9yb3cuY2xvc2VzdCgndGJvZHknKTtcblx0XHRcdFx0Y2hlY2tib3hlc19yb3dzID0gbGFzdF9jaGVja2JveF90Ym9keS5maW5kKCd0cicpLnRvQXJyYXkoKTtcblx0XHRcdFx0aWYgKGN1cnJlbnRfY2hlY2tib3hfcm93LmluZGV4KCkgPiBsYXN0X2NoZWNrYm94X3Jvdy5pbmRleCgpKSB7XG5cdFx0XHRcdFx0cm93cyA9IGNoZWNrYm94ZXNfcm93cy5zbGljZShsYXN0X2NoZWNrYm94X3Jvdy5pbmRleCgpLCBjdXJyZW50X2NoZWNrYm94X3Jvdy5pbmRleCgpKTtcblx0XHRcdFx0fSBlbHNlIGlmIChjdXJyZW50X2NoZWNrYm94X3Jvdy5pbmRleCgpIDwgbGFzdF9jaGVja2JveF9yb3cuaW5kZXgoKSkge1xuXHRcdFx0XHRcdHJvd3MgPSBjaGVja2JveGVzX3Jvd3Muc2xpY2UoY3VycmVudF9jaGVja2JveF9yb3cuaW5kZXgoKSArIDEsIGxhc3RfY2hlY2tib3hfcm93LmluZGV4KCkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICghcm93cykge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRmb3IgKGogPSAwLCBsZW4xID0gcm93cy5sZW5ndGg7IGogPCBsZW4xOyBqKyspIHtcblx0XHRcdFx0XHRyb3cgPSByb3dzW2pdO1xuXHRcdFx0XHRcdGlucHV0ID0gJChyb3cpLmZpbmQoJy5jb2wtY2hlY2tib3ggaW5wdXRbdHlwZT1jaGVja2JveF0nKVswXTtcblx0XHRcdFx0XHRpZiAoaW5wdXQpIHtcblx0XHRcdFx0XHRcdGlucHV0LmNoZWNrZWQgPSB0cnVlO1xuXHRcdFx0XHRcdFx0aWUgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKFwiTVNJRSBcIik7XG5cdFx0XHRcdFx0XHRpZiAoaWUpIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuaW5pdEV2ZW50KCdjaGFuZ2UnLCB0cnVlLCB0cnVlKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGV2ZW50ID0gbmV3IEV2ZW50KCdjaGFuZ2UnLCB7XG5cdFx0XHRcdFx0XHRcdFx0J2J1YmJsZXMnOiB0cnVlXG5cdFx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0aW5wdXQuZGlzcGF0Y2hFdmVudChldmVudCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJlZjEgPSBnZXRFdmVudERvbVBhdGgoZSk7XG5cdFx0cmVzdWx0cyA9IFtdO1xuXHRcdGZvciAoayA9IDAsIGxlbjIgPSByZWYxLmxlbmd0aDsgayA8IGxlbjI7IGsrKykge1xuXHRcdFx0ZWwgPSByZWYxW2tdO1xuXHRcdFx0aWYgKCQoZWwpLmlzKCcuY29sLWNoZWNrYm94JykpIHtcblx0XHRcdFx0cmVzdWx0cy5wdXNoKGxhc3RfY2hlY2tib3ggPSAkKGVsKSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXN1bHRzLnB1c2godm9pZCAwKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH0pO1xufTtcblxuZGF0YWdyaWRTaGlmdEdyb3VwU2VsZWN0aW9uKCk7XG5cbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGZ1bmN0aW9uKGUpIHtcblx0dmFyIGJ1dHRvbnMsIGNoZWNrZWRfaW5wdXRzLCBjb3VudGVyLCBldmVudCwgZ3JpZCwgaSwgaWUsIGlucHV0LCBpbnB1dHMsIGxlbiwgcmVzdWx0cywgc2VsZWN0LCB0b3RhbDtcblx0Z3JpZCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1jaGVjaycpO1xuXHRpZiAoZ3JpZCkge1xuXHRcdGNoZWNrZWRfaW5wdXRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbZGF0YS1jaGVjay1hbGwtJyArIGdyaWQgKyAnXTpjaGVja2VkJyk7XG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmRhdGFncmlkLScgKyBncmlkICsgJyBzZWxlY3RbbmFtZT1cImdyb3VwX2FjdGlvbltncm91cF9hY3Rpb25dXCJdJyk7XG5cdFx0YnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5kYXRhZ3JpZC0nICsgZ3JpZCArICcgaW5wdXRbdHlwZT1cInN1Ym1pdFwiXScpO1xuXHRcdGlmIChidXR0b25zLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0YnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5kYXRhZ3JpZC0nICsgZ3JpZCArICcgYnV0dG9uW3R5cGU9XCJzdWJtaXRcIl0nKTtcblx0XHR9XG5cdFx0Y291bnRlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5kYXRhZ3JpZC0nICsgZ3JpZCArICcgLmRhdGFncmlkLXNlbGVjdGVkLXJvd3MtY291bnQnKTtcblxuXHRcdGlmIChjaGVja2VkX2lucHV0cy5sZW5ndGgpIHtcblx0XHRcdGlmIChidXR0b25zKSB7XG5cdFx0XHRcdGJ1dHRvbnMuZm9yRWFjaChmdW5jdGlvbiAoYnV0dG9uKSB7XG5cdFx0XHRcdFx0YnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHNlbGVjdCkge1xuXHRcdFx0XHRzZWxlY3QuZGlzYWJsZWQgPSBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHRvdGFsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbZGF0YS1jaGVjay1hbGwtJyArIGdyaWQgKyAnXScpLmxlbmd0aDtcblx0XHRcdGlmIChjb3VudGVyKSB7XG5cdFx0XHRcdGNvdW50ZXIuaW5uZXJIVE1MID0gY2hlY2tlZF9pbnB1dHMubGVuZ3RoICsgJy8nICsgdG90YWw7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmIChidXR0b25zKSB7XG5cdFx0XHRcdGJ1dHRvbnMuZm9yRWFjaChmdW5jdGlvbiAoYnV0dG9uKSB7XG5cdFx0XHRcdFx0YnV0dG9uLmRpc2FibGVkID0gdHJ1ZTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoc2VsZWN0KSB7XG5cdFx0XHRcdHNlbGVjdC5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRcdHNlbGVjdC52YWx1ZSA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0XHRpZiAoY291bnRlcikge1xuXHRcdFx0XHRjb3VudGVyLmlubmVySFRNTCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGllID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIk1TSUUgXCIpO1xuXHRcdGlmIChpZSkge1xuXHRcdFx0ZXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcblx0XHRcdGV2ZW50LmluaXRFdmVudCgnY2hhbmdlJywgdHJ1ZSwgdHJ1ZSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGV2ZW50ID0gbmV3IEV2ZW50KCdjaGFuZ2UnLCB7XG5cdFx0XHRcdCdidWJibGVzJzogdHJ1ZVxuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdGlmIChzZWxlY3QpIHtcblx0XHRcdHNlbGVjdC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcblx0XHR9XG5cdH1cblx0Z3JpZCA9IGUudGFyZ2V0LmdldEF0dHJpYnV0ZSgnZGF0YS1jaGVjay1hbGwnKTtcblx0aWYgKGdyaWQpIHtcblx0XHRpbnB1dHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFt0eXBlPWNoZWNrYm94XVtkYXRhLWNoZWNrLWFsbC0nICsgZ3JpZCArICddJyk7XG5cdFx0cmVzdWx0cyA9IFtdO1xuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGlucHV0cy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aW5wdXQgPSBpbnB1dHNbaV07XG5cdFx0XHRpbnB1dC5jaGVja2VkID0gZS50YXJnZXQuY2hlY2tlZDtcblx0XHRcdGllID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZihcIk1TSUUgXCIpO1xuXHRcdFx0aWYgKGllKSB7XG5cdFx0XHRcdGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG5cdFx0XHRcdGV2ZW50LmluaXRFdmVudCgnY2hhbmdlJywgdHJ1ZSwgdHJ1ZSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRldmVudCA9IG5ldyBFdmVudCgnY2hhbmdlJywge1xuXHRcdFx0XHRcdCdidWJibGVzJzogdHJ1ZVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHRcdHJlc3VsdHMucHVzaChpbnB1dC5kaXNwYXRjaEV2ZW50KGV2ZW50KSk7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHRzO1xuXHR9XG59KTtcblxuXG53aW5kb3cuZGF0YWdyaWRTZXJpYWxpemVVcmwgPSBmdW5jdGlvbihvYmosIHByZWZpeCkge1xudmFyIHN0ciA9IFtdO1xuZm9yKHZhciBwIGluIG9iaikge1xuXHRpZiAob2JqLmhhc093blByb3BlcnR5KHApKSB7XG5cdFx0dmFyIGsgPSBwcmVmaXggPyBwcmVmaXggKyBcIltcIiArIHAgKyBcIl1cIiA6IHAsIHYgPSBvYmpbcF07XG5cdFx0aWYgKHYgIT09IG51bGwgJiYgdiAhPT0gXCJcIikge1xuXHRcdFx0aWYgKHR5cGVvZiB2ID09IFwib2JqZWN0XCIpIHtcblx0XHRcdFx0dmFyIHIgPSB3aW5kb3cuZGF0YWdyaWRTZXJpYWxpemVVcmwodiwgayk7XG5cdFx0XHRcdFx0aWYgKHIpIHtcblx0XHRcdFx0XHRcdHN0ci5wdXNoKHIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHN0ci5wdXNoKGVuY29kZVVSSUNvbXBvbmVudChrKSArIFwiPVwiICsgZW5jb2RlVVJJQ29tcG9uZW50KHYpKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cbnJldHVybiBzdHIuam9pbihcIiZcIik7XG59XG47XG5cbmRhdGFncmlkU29ydGFibGUgPSBmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiAkLmZuLnNvcnRhYmxlID09PSAndW5kZWZpbmVkJykge1xuXHRcdHJldHVybjtcblx0fVxuXHRyZXR1cm4gJCgnLmRhdGFncmlkIFtkYXRhLXNvcnRhYmxlXScpLnNvcnRhYmxlKHtcblx0XHRoYW5kbGU6ICcuaGFuZGxlLXNvcnQnLFxuXHRcdGl0ZW1zOiAndHInLFxuXHRcdGF4aXM6ICd5Jyxcblx0XHR1cGRhdGU6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuXHRcdFx0dmFyIGNvbXBvbmVudF9wcmVmaXgsIGRhdGEsIGl0ZW1faWQsIG5leHRfaWQsIHByZXZfaWQsIHJvdywgdXJsO1xuXHRcdFx0cm93ID0gdWkuaXRlbS5jbG9zZXN0KCd0cltkYXRhLWlkXScpO1xuXHRcdFx0aXRlbV9pZCA9IHJvdy5kYXRhKCdpZCcpO1xuXHRcdFx0cHJldl9pZCA9IG51bGw7XG5cdFx0XHRuZXh0X2lkID0gbnVsbDtcblx0XHRcdGlmIChyb3cucHJldigpLmxlbmd0aCkge1xuXHRcdFx0XHRwcmV2X2lkID0gcm93LnByZXYoKS5kYXRhKCdpZCcpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHJvdy5uZXh0KCkubGVuZ3RoKSB7XG5cdFx0XHRcdG5leHRfaWQgPSByb3cubmV4dCgpLmRhdGEoJ2lkJyk7XG5cdFx0XHR9XG5cdFx0XHR1cmwgPSAkKHRoaXMpLmRhdGEoJ3NvcnRhYmxlLXVybCcpO1xuXHRcdFx0ZGF0YSA9IHt9O1xuXHRcdFx0Y29tcG9uZW50X3ByZWZpeCA9IHJvdy5jbG9zZXN0KCcuZGF0YWdyaWQnKS5maW5kKCd0Ym9keScpLmF0dHIoJ2RhdGEtc29ydGFibGUtcGFyZW50LXBhdGgnKTtcblx0XHRcdGRhdGFbKGNvbXBvbmVudF9wcmVmaXggKyAnLWl0ZW1faWQnKS5yZXBsYWNlKC9eLS8sICcnKV0gPSBpdGVtX2lkO1xuXHRcdFx0aWYgKHByZXZfaWQgIT09IG51bGwpIHtcblx0XHRcdFx0ZGF0YVsoY29tcG9uZW50X3ByZWZpeCArICctcHJldl9pZCcpLnJlcGxhY2UoL14tLywgJycpXSA9IHByZXZfaWQ7XG5cdFx0XHR9XG5cdFx0XHRpZiAobmV4dF9pZCAhPT0gbnVsbCkge1xuXHRcdFx0XHRkYXRhWyhjb21wb25lbnRfcHJlZml4ICsgJy1uZXh0X2lkJykucmVwbGFjZSgvXi0vLCAnJyldID0gbmV4dF9pZDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBkYXRhR3JpZFJlZ2lzdGVyQWpheENhbGwoe1xuXHRcdFx0XHR0eXBlOiAnR0VUJyxcblx0XHRcdFx0dXJsOiB1cmwsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGVycm9yOiBmdW5jdGlvbihqcVhIUiwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHtcblx0XHRcdFx0XHRyZXR1cm4gYWxlcnQoanFYSFIuc3RhdHVzVGV4dCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdH0sXG5cdFx0aGVscGVyOiBmdW5jdGlvbihlLCB1aSkge1xuXHRcdFx0dWkuY2hpbGRyZW4oKS5lYWNoKGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gJCh0aGlzKS53aWR0aCgkKHRoaXMpLndpZHRoKCkpO1xuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gdWk7XG5cdFx0fVxuXHR9KTtcbn07XG5cbiQoZnVuY3Rpb24oKSB7XG5cdHJldHVybiBkYXRhZ3JpZFNvcnRhYmxlKCk7XG59KTtcblxuaWYgKHR5cGVvZiBkYXRhZ3JpZFNvcnRhYmxlVHJlZSA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0ZGF0YWdyaWRTb3J0YWJsZVRyZWUgPSBmdW5jdGlvbigpIHtcblx0XHRpZiAodHlwZW9mICQoJy5kYXRhZ3JpZC10cmVlLWl0ZW0tY2hpbGRyZW4nKS5zb3J0YWJsZSA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0cmV0dXJuICQoJy5kYXRhZ3JpZC10cmVlLWl0ZW0tY2hpbGRyZW4nKS5zb3J0YWJsZSh7XG5cdFx0XHRoYW5kbGU6ICcuaGFuZGxlLXNvcnQnLFxuXHRcdFx0aXRlbXM6ICcuZGF0YWdyaWQtdHJlZS1pdGVtOm5vdCguZGF0YWdyaWQtdHJlZS1oZWFkZXIpJyxcblx0XHRcdHRvbGVyYW5jZUVsZW1lbnQ6ICc+IC5kYXRhZ3JpZC10cmVlLWl0ZW0tY29udGVudCcsXG5cdFx0XHRjb25uZWN0V2l0aDogJy5kYXRhZ3JpZC10cmVlLWl0ZW0tY2hpbGRyZW4nLFxuXHRcdFx0dXBkYXRlOiBmdW5jdGlvbihldmVudCwgdWkpIHtcblx0XHRcdFx0dmFyIGNvbXBvbmVudF9wcmVmaXgsIGRhdGEsIGl0ZW1faWQsIG5leHRfaWQsIHBhcmVudCwgcGFyZW50X2lkLCBwcmV2X2lkLCByb3csIHVybDtcblx0XHRcdFx0JCgnLnRvZ2dsZS10cmVlLXRvLWRlbGV0ZScpLnJlbW92ZSgpO1xuXHRcdFx0XHRyb3cgPSB1aS5pdGVtLmNsb3Nlc3QoJy5kYXRhZ3JpZC10cmVlLWl0ZW1bZGF0YS1pZF0nKTtcblx0XHRcdFx0aXRlbV9pZCA9IHJvdy5kYXRhKCdpZCcpO1xuXHRcdFx0XHRwcmV2X2lkID0gbnVsbDtcblx0XHRcdFx0bmV4dF9pZCA9IG51bGw7XG5cdFx0XHRcdHBhcmVudF9pZCA9IG51bGw7XG5cdFx0XHRcdGlmIChyb3cucHJldigpLmxlbmd0aCkge1xuXHRcdFx0XHRcdHByZXZfaWQgPSByb3cucHJldigpLmRhdGEoJ2lkJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHJvdy5uZXh0KCkubGVuZ3RoKSB7XG5cdFx0XHRcdFx0bmV4dF9pZCA9IHJvdy5uZXh0KCkuZGF0YSgnaWQnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRwYXJlbnQgPSByb3cucGFyZW50KCkuY2xvc2VzdCgnLmRhdGFncmlkLXRyZWUtaXRlbScpO1xuXHRcdFx0XHRpZiAocGFyZW50Lmxlbmd0aCkge1xuXHRcdFx0XHRcdHBhcmVudC5maW5kKCcuZGF0YWdyaWQtdHJlZS1pdGVtLWNoaWxkcmVuJykuZmlyc3QoKS5jc3Moe1xuXHRcdFx0XHRcdFx0ZGlzcGxheTogJ2Jsb2NrJ1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHBhcmVudC5hZGRDbGFzcygnaGFzLWNoaWxkcmVuJyk7XG5cdFx0XHRcdFx0cGFyZW50X2lkID0gcGFyZW50LmRhdGEoJ2lkJyk7XG5cdFx0XHRcdH1cblx0XHRcdFx0dXJsID0gJCh0aGlzKS5kYXRhKCdzb3J0YWJsZS11cmwnKTtcblx0XHRcdFx0aWYgKCF1cmwpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblx0XHRcdFx0cGFyZW50LmZpbmQoJ1tkYXRhLXRvZ2dsZS10cmVlXScpLmZpcnN0KCkucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xuXHRcdFx0XHRjb21wb25lbnRfcHJlZml4ID0gcm93LmNsb3Nlc3QoJy5kYXRhZ3JpZC10cmVlJykuYXR0cignZGF0YS1zb3J0YWJsZS1wYXJlbnQtcGF0aCcpO1xuXHRcdFx0XHRkYXRhID0ge307XG5cdFx0XHRcdGRhdGFbKGNvbXBvbmVudF9wcmVmaXggKyAnLWl0ZW1faWQnKS5yZXBsYWNlKC9eLS8sICcnKV0gPSBpdGVtX2lkO1xuXHRcdFx0XHRpZiAocHJldl9pZCAhPT0gbnVsbCkge1xuXHRcdFx0XHRcdGRhdGFbKGNvbXBvbmVudF9wcmVmaXggKyAnLXByZXZfaWQnKS5yZXBsYWNlKC9eLS8sICcnKV0gPSBwcmV2X2lkO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChuZXh0X2lkICE9PSBudWxsKSB7XG5cdFx0XHRcdFx0ZGF0YVsoY29tcG9uZW50X3ByZWZpeCArICctbmV4dF9pZCcpLnJlcGxhY2UoL14tLywgJycpXSA9IG5leHRfaWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVsoY29tcG9uZW50X3ByZWZpeCArICctcGFyZW50X2lkJykucmVwbGFjZSgvXi0vLCAnJyldID0gcGFyZW50X2lkO1xuXHRcdFx0XHRyZXR1cm4gZGF0YUdyaWRSZWdpc3RlckFqYXhDYWxsKHtcblx0XHRcdFx0XHR0eXBlOiAnR0VUJyxcblx0XHRcdFx0XHR1cmw6IHVybCxcblx0XHRcdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0XHRcdGVycm9yOiBmdW5jdGlvbihqcVhIUiwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pIHtcblx0XHRcdFx0XHRcdGlmIChlcnJvclRocm93biAhPT0gJ2Fib3J0Jykge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gYWxlcnQoanFYSFIuc3RhdHVzVGV4dCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbihldmVudCwgdWkpIHtcblx0XHRcdFx0cmV0dXJuICQoJy50b2dnbGUtdHJlZS10by1kZWxldGUnKS5yZW1vdmVDbGFzcygndG9nZ2xlLXRyZWUtdG8tZGVsZXRlJyk7XG5cdFx0XHR9LFxuXHRcdFx0c3RhcnQ6IGZ1bmN0aW9uKGV2ZW50LCB1aSkge1xuXHRcdFx0XHR2YXIgcGFyZW50O1xuXHRcdFx0XHRwYXJlbnQgPSB1aS5pdGVtLnBhcmVudCgpLmNsb3Nlc3QoJy5kYXRhZ3JpZC10cmVlLWl0ZW0nKTtcblx0XHRcdFx0aWYgKHBhcmVudC5sZW5ndGgpIHtcblx0XHRcdFx0XHRpZiAocGFyZW50LmZpbmQoJy5kYXRhZ3JpZC10cmVlLWl0ZW0nKS5sZW5ndGggPT09IDIpIHtcblx0XHRcdFx0XHRcdHJldHVybiBwYXJlbnQuZmluZCgnW2RhdGEtdG9nZ2xlLXRyZWVdJykuYWRkQ2xhc3MoJ3RvZ2dsZS10cmVlLXRvLWRlbGV0ZScpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9O1xufVxuXG4kKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gZGF0YWdyaWRTb3J0YWJsZVRyZWUoKTtcbn0pO1xuXG5kYXRhR3JpZFJlZ2lzdGVyRXh0ZW5zaW9uKCdkYXRhZ3JpZC5oYXBweScsIHtcblx0c3VjY2VzczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGMsIGNoZWNrZWRfcm93cywgY2xhc3Nfc2VsZWN0b3IsIGNsYXNzZXMsIGV2ZW50LCBncmlkLCBncmlkcywgaSwgaWUsIGlucHV0LCBqLCBsZW4sIGxlbjEsIHJlc3VsdHM7XG5cdFx0aWYgKHdpbmRvdy5oYXBweSkge1xuXHRcdFx0d2luZG93LmhhcHB5LnJlc2V0KCk7XG5cdFx0fVxuXHRcdGdyaWRzID0gJCgnLmRhdGFncmlkJyk7XG5cdFx0cmVzdWx0cyA9IFtdO1xuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGdyaWRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRncmlkID0gZ3JpZHNbaV07XG5cdFx0XHRjbGFzc2VzID0gZ3JpZC5jbGFzc0xpc3Q7XG5cdFx0XHRjbGFzc19zZWxlY3RvciA9ICcnO1xuXHRcdFx0Zm9yIChqID0gMCwgbGVuMSA9IGNsYXNzZXMubGVuZ3RoOyBqIDwgbGVuMTsgaisrKSB7XG5cdFx0XHRcdGMgPSBjbGFzc2VzW2pdO1xuXHRcdFx0XHRjbGFzc19zZWxlY3RvciA9IGNsYXNzX3NlbGVjdG9yICsgJy4nICsgYztcblx0XHRcdH1cblx0XHRcdGNoZWNrZWRfcm93cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoY2xhc3Nfc2VsZWN0b3IgKyAnICcgKyAnaW5wdXRbZGF0YS1jaGVja106Y2hlY2tlZCcpO1xuXHRcdFx0aWYgKGNoZWNrZWRfcm93cy5sZW5ndGggPT09IDEgJiYgY2hlY2tlZF9yb3dzWzBdLmdldEF0dHJpYnV0ZSgnbmFtZScpID09PSAndG9nZ2xlLWFsbCcpIHtcblx0XHRcdFx0aW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNsYXNzX3NlbGVjdG9yICsgJyBpbnB1dFtuYW1lPXRvZ2dsZS1hbGxdJyk7XG5cdFx0XHRcdGlmIChpbnB1dCkge1xuXHRcdFx0XHRcdGlucHV0LmNoZWNrZWQgPSBmYWxzZTtcblx0XHRcdFx0XHRpZSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoXCJNU0lFIFwiKTtcblx0XHRcdFx0XHRpZiAoaWUpIHtcblx0XHRcdFx0XHRcdGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG5cdFx0XHRcdFx0XHRldmVudC5pbml0RXZlbnQoJ2NoYW5nZScsIHRydWUsIHRydWUpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRldmVudCA9IG5ldyBFdmVudCgnY2hhbmdlJywge1xuXHRcdFx0XHRcdFx0XHQnYnViYmxlcyc6IHRydWVcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXN1bHRzLnB1c2goaW5wdXQuZGlzcGF0Y2hFdmVudChldmVudCkpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJlc3VsdHMucHVzaCh2b2lkIDApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXN1bHRzLnB1c2godm9pZCAwKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cbn0pO1xuXG5kYXRhR3JpZFJlZ2lzdGVyRXh0ZW5zaW9uKCdkYXRhZ3JpZC5zb3J0YWJsZScsIHtcblx0c3VjY2VzczogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRhdGFncmlkU29ydGFibGUoKTtcblx0fVxufSk7XG5cbmRhdGFHcmlkUmVnaXN0ZXJFeHRlbnNpb24oJ2RhdGFncmlkLmZvcm1zJywge1xuXHRzdWNjZXNzOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gJCgnLmRhdGFncmlkJykuZmluZCgnZm9ybScpLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gd2luZG93Lk5ldHRlLmluaXRGb3JtKHRoaXMpO1xuXHRcdH0pO1xuXHR9XG59KTtcblxuZGF0YUdyaWRSZWdpc3RlckV4dGVuc2lvbignZGF0YWdyaWQudXJsJywge1xuXHRzdWNjZXNzOiBmdW5jdGlvbihwYXlsb2FkKSB7XG5cdFx0dmFyIGhvc3QsIHBhdGgsIHF1ZXJ5LCB1cmw7XG5cdFx0aWYgKHBheWxvYWQuX2RhdGFncmlkX3VybCkge1xuXHRcdFx0aWYgKHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSkge1xuXHRcdFx0XHRob3N0ID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICsgd2luZG93LmxvY2F0aW9uLmhvc3Q7XG5cdFx0XHRcdHBhdGggPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWU7XG5cdFx0XHRcdHF1ZXJ5ID0gd2luZG93LmRhdGFncmlkU2VyaWFsaXplVXJsKHBheWxvYWQuc3RhdGUpLnJlcGxhY2UoLyYrJC9nbSwgJycpO1xuXHRcdFx0XHRpZiAocXVlcnkpIHtcblx0XHRcdFx0XHR1cmwgPSBob3N0ICsgcGF0aCArIFwiP1wiICsgcXVlcnkucmVwbGFjZSgvXFwmKiQvLCAnJyk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dXJsID0gaG9zdCArIHBhdGg7XG5cdFx0XHRcdH1cblx0XHRcdFx0dXJsICs9IHdpbmRvdy5sb2NhdGlvbi5oYXNoO1xuXHRcdFx0XHRpZiAod2luZG93LmxvY2F0aW9uLmhyZWYgIT09IHVybCkge1xuXHRcdFx0XHRcdHJldHVybiB3aW5kb3cuaGlzdG9yeS5yZXBsYWNlU3RhdGUoe1xuXHRcdFx0XHRcdFx0cGF0aDogdXJsXG5cdFx0XHRcdFx0fSwgJycsIHVybCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pO1xuXG5kYXRhR3JpZFJlZ2lzdGVyRXh0ZW5zaW9uKCdkYXRhZ3JpZC5zb3J0Jywge1xuXHRzdWNjZXNzOiBmdW5jdGlvbihwYXlsb2FkKSB7XG5cdFx0dmFyIGhyZWYsIGtleSwgcmVmLCByZXN1bHRzO1xuXHRcdGlmIChwYXlsb2FkLl9kYXRhZ3JpZF9zb3J0KSB7XG5cdFx0XHRyZWYgPSBwYXlsb2FkLl9kYXRhZ3JpZF9zb3J0O1xuXHRcdFx0cmVzdWx0cyA9IFtdO1xuXHRcdFx0Zm9yIChrZXkgaW4gcmVmKSB7XG5cdFx0XHRcdGhyZWYgPSByZWZba2V5XTtcblx0XHRcdFx0cmVzdWx0cy5wdXNoKCQoJyNkYXRhZ3JpZC1zb3J0LScgKyBrZXkpLmF0dHIoJ2hyZWYnLCBocmVmKSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHR9XG5cdH1cbn0pO1xuXG5kYXRhR3JpZFJlZ2lzdGVyRXh0ZW5zaW9uKCdkYXRhcmdpZC5pdGVtX2RldGFpbCcsIHtcblx0YmVmb3JlOiBmdW5jdGlvbih4aHIsIHNldHRpbmdzKSB7XG5cdFx0dmFyIGlkLCByb3dfZGV0YWlsLCBncmlkX2Z1bGxuYW1lO1xuXHRcdGlmIChzZXR0aW5ncy5uZXR0ZSAmJiBzZXR0aW5ncy5uZXR0ZS5lbC5hdHRyKCdkYXRhLXRvZ2dsZS1kZXRhaWwnKSkge1xuXHRcdFx0aWQgPSBzZXR0aW5ncy5uZXR0ZS5lbC5hdHRyKCdkYXRhLXRvZ2dsZS1kZXRhaWwnKTtcblx0XHRcdGdyaWRfZnVsbG5hbWUgPSBzZXR0aW5ncy5uZXR0ZS5lbC5hdHRyKCdkYXRhLXRvZ2dsZS1kZXRhaWwtZ3JpZC1mdWxsbmFtZScpO1xuXHRcdFx0cm93X2RldGFpbCA9ICQoJy5pdGVtLWRldGFpbC0nICsgZ3JpZF9mdWxsbmFtZSArICctaWQtJyArIGlkKTtcblx0XHRcdGlmIChyb3dfZGV0YWlsLmhhc0NsYXNzKCdsb2FkZWQnKSkge1xuXHRcdFx0XHRpZiAoIXJvd19kZXRhaWwuZmluZCgnLml0ZW0tZGV0YWlsLWNvbnRlbnQnKS5sZW5ndGgpIHtcblx0XHRcdFx0XHRyb3dfZGV0YWlsLnJlbW92ZUNsYXNzKCd0b2dnbGVkJyk7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKHJvd19kZXRhaWwuaGFzQ2xhc3MoJ3RvZ2dsZWQnKSkge1xuXHRcdFx0XHRcdHJvd19kZXRhaWwuZmluZCgnLml0ZW0tZGV0YWlsLWNvbnRlbnQnKS5zbGlkZVRvZ2dsZSgnZmFzdCcsIChmdW5jdGlvbihfdGhpcykge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcm93X2RldGFpbC50b2dnbGVDbGFzcygndG9nZ2xlZCcpO1xuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9KSh0aGlzKSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cm93X2RldGFpbC50b2dnbGVDbGFzcygndG9nZ2xlZCcpO1xuXHRcdFx0XHRcdHJvd19kZXRhaWwuZmluZCgnLml0ZW0tZGV0YWlsLWNvbnRlbnQnKS5zbGlkZVRvZ2dsZSgnZmFzdCcpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiByb3dfZGV0YWlsLmFkZENsYXNzKCdsb2FkZWQnKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cdHN1Y2Nlc3M6IGZ1bmN0aW9uKHBheWxvYWQpIHtcblx0XHR2YXIgaWQsIHJvd19kZXRhaWwsIGdyaWRfZnVsbG5hbWU7XG5cdFx0aWYgKHBheWxvYWQuX2RhdGFncmlkX3RvZ2dsZV9kZXRhaWwgJiYgcGF5bG9hZC5fZGF0YWdyaWRfbmFtZSkge1xuXHRcdFx0aWQgPSBwYXlsb2FkLl9kYXRhZ3JpZF90b2dnbGVfZGV0YWlsO1xuXHRcdFx0Z3JpZF9mdWxsbmFtZSA9IHBheWxvYWQuX2RhdGFncmlkX25hbWU7XG5cdFx0XHRyb3dfZGV0YWlsID0gJCgnLml0ZW0tZGV0YWlsLScgKyBncmlkX2Z1bGxuYW1lICsgJy1pZC0nICsgaWQpO1xuXHRcdFx0cm93X2RldGFpbC50b2dnbGVDbGFzcygndG9nZ2xlZCcpO1xuXHRcdFx0cmV0dXJuIHJvd19kZXRhaWwuZmluZCgnLml0ZW0tZGV0YWlsLWNvbnRlbnQnKS5zbGlkZVRvZ2dsZSgnZmFzdCcpO1xuXHRcdH1cblx0fVxufSk7XG5cbmRhdGFHcmlkUmVnaXN0ZXJFeHRlbnNpb24oJ2RhdGFncmlkLnRyZWUnLCB7XG5cdGJlZm9yZTogZnVuY3Rpb24oeGhyLCBzZXR0aW5ncykge1xuXHRcdHZhciBjaGlsZHJlbl9ibG9jaztcblx0XHRpZiAoc2V0dGluZ3MubmV0dGUgJiYgc2V0dGluZ3MubmV0dGUuZWwuYXR0cignZGF0YS10b2dnbGUtdHJlZScpKSB7XG5cdFx0XHRzZXR0aW5ncy5uZXR0ZS5lbC50b2dnbGVDbGFzcygndG9nZ2xlLXJvdGF0ZScpO1xuXHRcdFx0Y2hpbGRyZW5fYmxvY2sgPSBzZXR0aW5ncy5uZXR0ZS5lbC5jbG9zZXN0KCcuZGF0YWdyaWQtdHJlZS1pdGVtJykuZmluZCgnLmRhdGFncmlkLXRyZWUtaXRlbS1jaGlsZHJlbicpLmZpcnN0KCk7XG5cdFx0XHRpZiAoY2hpbGRyZW5fYmxvY2suaGFzQ2xhc3MoJ2xvYWRlZCcpKSB7XG5cdFx0XHRcdGNoaWxkcmVuX2Jsb2NrLnNsaWRlVG9nZ2xlKCdmYXN0Jyk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIHRydWU7XG5cdH0sXG5cdHN1Y2Nlc3M6IGZ1bmN0aW9uKHBheWxvYWQpIHtcblx0XHR2YXIgY2hpbGRyZW5fYmxvY2ssIGNvbnRlbnQsIGlkLCBuYW1lLCByZWYsIHNuaXBwZXQsIHRlbXBsYXRlO1xuXHRcdGlmIChwYXlsb2FkLl9kYXRhZ3JpZF90cmVlKSB7XG5cdFx0XHRpZCA9IHBheWxvYWQuX2RhdGFncmlkX3RyZWU7XG5cdFx0XHRjaGlsZHJlbl9ibG9jayA9ICQoJy5kYXRhZ3JpZC10cmVlLWl0ZW1bZGF0YS1pZD1cIicgKyBpZCArICdcIl0nKS5maW5kKCcuZGF0YWdyaWQtdHJlZS1pdGVtLWNoaWxkcmVuJykuZmlyc3QoKTtcblx0XHRcdGNoaWxkcmVuX2Jsb2NrLmFkZENsYXNzKCdsb2FkZWQnKTtcblx0XHRcdHJlZiA9IHBheWxvYWQuc25pcHBldHM7XG5cdFx0XHRmb3IgKG5hbWUgaW4gcmVmKSB7XG5cdFx0XHRcdHNuaXBwZXQgPSByZWZbbmFtZV07XG5cdFx0XHRcdGNvbnRlbnQgPSAkKHNuaXBwZXQpO1xuXHRcdFx0XHR0ZW1wbGF0ZSA9ICQoJzxkaXYgY2xhc3M9XCJkYXRhZ3JpZC10cmVlLWl0ZW1cIiBpZD1cIicgKyBuYW1lICsgJ1wiPicpO1xuXHRcdFx0XHR0ZW1wbGF0ZS5hdHRyKCdkYXRhLWlkJywgY29udGVudC5hdHRyKCdkYXRhLWlkJykpO1xuXHRcdFx0XHR0ZW1wbGF0ZS5hcHBlbmQoY29udGVudCk7XG5cdFx0XHRcdGlmIChjb250ZW50LmRhdGEoJ2hhcy1jaGlsZHJlbicpKSB7XG5cdFx0XHRcdFx0dGVtcGxhdGUuYWRkQ2xhc3MoJ2hhcy1jaGlsZHJlbicpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNoaWxkcmVuX2Jsb2NrLmFwcGVuZCh0ZW1wbGF0ZSk7XG5cdFx0XHR9XG5cdFx0XHRjaGlsZHJlbl9ibG9jay5hZGRDbGFzcygnbG9hZGVkJyk7XG5cdFx0XHRjaGlsZHJlbl9ibG9jay5zbGlkZVRvZ2dsZSgnZmFzdCcpO1xuXHRcdFx0ZGF0YUdyaWRMb2FkKCk7XG5cdFx0fVxuXHRcdHJldHVybiBkYXRhZ3JpZFNvcnRhYmxlVHJlZSgpO1xuXHR9XG59KTtcblxuJChkb2N1bWVudCkub24oJ2NsaWNrJywgJ1tkYXRhLWRhdGFncmlkLWVkaXRhYmxlLXVybF0nLCBmdW5jdGlvbihldmVudCkge1xuXHR2YXIgYXR0cl9uYW1lLCBhdHRyX3ZhbHVlLCBhdHRycywgY2VsbCwgY2VsbFZhbHVlLCBjZWxsX2hlaWdodCwgY2VsbF9saW5lcywgY2VsbF9wYWRkaW5nLCBpbnB1dCwgbGluZV9oZWlnaHQsIHN1Ym1pdCwgdmFsdWVUb0VkaXQ7XG5cdGNlbGwgPSAkKHRoaXMpO1xuXHRpZiAoZXZlbnQudGFyZ2V0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2EnKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGlmIChjZWxsLmhhc0NsYXNzKCdkYXRhZ3JpZC1pbmxpbmUtZWRpdCcpKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cdGlmICghY2VsbC5oYXNDbGFzcygnZWRpdGluZycpKSB7XG5cdFx0Y2VsbC5hZGRDbGFzcygnZWRpdGluZycpO1xuXHRcdGNlbGxWYWx1ZSA9IGNlbGwuaHRtbCgpLnRyaW0oKS5yZXBsYWNlKCc8YnI+JywgJ1xcbicpO1xuXHRcdGlmIChjZWxsLmF0dHIoJ2RhdGEtZGF0YWdyaWQtZWRpdGFibGUtdmFsdWUnKSkge1xuXHRcdFx0dmFsdWVUb0VkaXQgPSBjZWxsLmRhdGEoJ2RhdGFncmlkLWVkaXRhYmxlLXZhbHVlJyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhbHVlVG9FZGl0ID0gY2VsbFZhbHVlO1xuXHRcdH1cblx0XHRjZWxsLmRhdGEoJ29yaWdpbmFsVmFsdWUnLCBjZWxsVmFsdWUpO1xuXHRcdGNlbGwuZGF0YSgndmFsdWVUb0VkaXQnLCB2YWx1ZVRvRWRpdCk7XG5cdFx0aWYgKGNlbGwuZGF0YSgnZGF0YWdyaWQtZWRpdGFibGUtdHlwZScpID09PSAndGV4dGFyZWEnKSB7XG5cdFx0XHRpbnB1dCA9ICQoJzx0ZXh0YXJlYT4nICsgdmFsdWVUb0VkaXQgKyAnPC90ZXh0YXJlYT4nKTtcblx0XHRcdGNlbGxfcGFkZGluZyA9IHBhcnNlSW50KGNlbGwuY3NzKCdwYWRkaW5nJykucmVwbGFjZSgvW14tXFxkXFwuXS9nLCAnJyksIDEwKTtcblx0XHRcdGNlbGxfaGVpZ2h0ID0gY2VsbC5vdXRlckhlaWdodCgpO1xuXHRcdFx0bGluZV9oZWlnaHQgPSBNYXRoLnJvdW5kKHBhcnNlRmxvYXQoY2VsbC5jc3MoJ2xpbmUtaGVpZ2h0JykpKTtcblx0XHRcdGNlbGxfbGluZXMgPSAoY2VsbF9oZWlnaHQgLSAoMiAqIGNlbGxfcGFkZGluZykpIC8gbGluZV9oZWlnaHQ7XG5cdFx0XHRpbnB1dC5hdHRyKCdyb3dzJywgTWF0aC5yb3VuZChjZWxsX2xpbmVzKSk7XG5cdFx0fSBlbHNlIGlmIChjZWxsLmRhdGEoJ2RhdGFncmlkLWVkaXRhYmxlLXR5cGUnKSA9PT0gJ3NlbGVjdCcpIHtcblx0XHRcdGlucHV0ID0gJChjZWxsLmRhdGEoJ2RhdGFncmlkLWVkaXRhYmxlLWVsZW1lbnQnKSk7XG5cdFx0XHRpbnB1dC5maW5kKFwib3B0aW9uW3ZhbHVlPSdcIiArIHZhbHVlVG9FZGl0ICsgXCInXVwiKS5wcm9wKCdzZWxlY3RlZCcsIHRydWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpbnB1dCA9ICQoJzxpbnB1dCB0eXBlPVwiJyArIGNlbGwuZGF0YSgnZGF0YWdyaWQtZWRpdGFibGUtdHlwZScpICsgJ1wiPicpO1xuXHRcdFx0aW5wdXQudmFsKHZhbHVlVG9FZGl0KTtcblx0XHR9XG5cdFx0YXR0cnMgPSBjZWxsLmRhdGEoJ2RhdGFncmlkLWVkaXRhYmxlLWF0dHJzJyk7XG5cdFx0Zm9yIChhdHRyX25hbWUgaW4gYXR0cnMpIHtcblx0XHRcdGF0dHJfdmFsdWUgPSBhdHRyc1thdHRyX25hbWVdO1xuXHRcdFx0aW5wdXQuYXR0cihhdHRyX25hbWUsIGF0dHJfdmFsdWUpO1xuXHRcdH1cblx0XHRjZWxsLnJlbW92ZUNsYXNzKCdlZGl0ZWQnKTtcblx0XHRjZWxsLmh0bWwoaW5wdXQpO1xuXHRcdHN1Ym1pdCA9IGZ1bmN0aW9uKGNlbGwsIGVsKSB7XG5cdFx0XHR2YXIgdmFsdWU7XG5cdFx0XHR2YWx1ZSA9IGVsLnZhbCgpO1xuXHRcdFx0aWYgKHZhbHVlICE9PSBjZWxsLmRhdGEoJ3ZhbHVlVG9FZGl0JykpIHtcblx0XHRcdFx0ZGF0YUdyaWRSZWdpc3RlckFqYXhDYWxsKHtcblx0XHRcdFx0XHR1cmw6IGNlbGwuZGF0YSgnZGF0YWdyaWQtZWRpdGFibGUtdXJsJyksXG5cdFx0XHRcdFx0ZGF0YToge1xuXHRcdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHR0eXBlOiAnUE9TVCcsXG5cdFx0XHRcdFx0c3VjY2VzczogZnVuY3Rpb24ocGF5bG9hZCkge1xuXHRcdFx0XHRcdFx0aWYgKGNlbGwuZGF0YSgnZGF0YWdyaWQtZWRpdGFibGUtdHlwZScpID09PSAnc2VsZWN0Jykge1xuXHRcdFx0XHRcdFx0XHRjZWxsLmh0bWwoaW5wdXQuZmluZChcIm9wdGlvblt2YWx1ZT0nXCIgKyB2YWx1ZSArIFwiJ11cIikuaHRtbCgpKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdGlmIChwYXlsb2FkLl9kYXRhZ3JpZF9lZGl0YWJsZV9uZXdfdmFsdWUpIHtcblx0XHRcdFx0XHRcdFx0XHR2YWx1ZSA9IHBheWxvYWQuX2RhdGFncmlkX2VkaXRhYmxlX25ld192YWx1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRjZWxsLmh0bWwodmFsdWUpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0cmV0dXJuIGNlbGwuYWRkQ2xhc3MoJ2VkaXRlZCcpO1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0ZXJyb3I6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0Y2VsbC5odG1sKGNlbGwuZGF0YSgnb3JpZ2luYWxWYWx1ZScpKTtcblx0XHRcdFx0XHRcdHJldHVybiBjZWxsLmFkZENsYXNzKCdlZGl0ZWQtZXJyb3InKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2VsbC5odG1sKGNlbGwuZGF0YSgnb3JpZ2luYWxWYWx1ZScpKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gY2VsbC5yZW1vdmVDbGFzcygnZWRpdGluZycpO1xuXHRcdFx0fSwgMTIwMCk7XG5cdFx0fTtcblx0XHRjZWxsLmZpbmQoJ2lucHV0LHRleHRhcmVhLHNlbGVjdCcpLmZvY3VzKCkub24oJ2JsdXInLCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBzdWJtaXQoY2VsbCwgJCh0aGlzKSk7XG5cdFx0fSkub24oJ2tleWRvd24nLCBmdW5jdGlvbihlKSB7XG5cdFx0XHRpZiAoY2VsbC5kYXRhKCdkYXRhZ3JpZC1lZGl0YWJsZS10eXBlJykgIT09ICd0ZXh0YXJlYScpIHtcblx0XHRcdFx0aWYgKGUud2hpY2ggPT09IDEzKSB7XG5cdFx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0cmV0dXJuIHN1Ym1pdChjZWxsLCAkKHRoaXMpKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKGUud2hpY2ggPT09IDI3KSB7XG5cdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0Y2VsbC5yZW1vdmVDbGFzcygnZWRpdGluZycpO1xuXHRcdFx0XHRyZXR1cm4gY2VsbC5odG1sKGNlbGwuZGF0YSgnb3JpZ2luYWxWYWx1ZScpKTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRyZXR1cm4gY2VsbC5maW5kKCdzZWxlY3QnKS5vbignY2hhbmdlJywgZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gc3VibWl0KGNlbGwsICQodGhpcykpO1xuXHRcdH0pO1xuXHR9XG59KTtcblxuZGF0YUdyaWRSZWdpc3RlckV4dGVuc2lvbignZGF0YWdyaWQuYWZ0ZXJfaW5saW5lX2VkaXQnLCB7XG5cdHN1Y2Nlc3M6IGZ1bmN0aW9uKHBheWxvYWQpIHtcblx0XHR2YXIgZ3JpZCA9ICQoJy5kYXRhZ3JpZC0nICsgcGF5bG9hZC5fZGF0YWdyaWRfbmFtZSk7XG5cblx0XHRpZiAocGF5bG9hZC5fZGF0YWdyaWRfaW5saW5lX2VkaXRlZCkge1xuXHRcdFx0Z3JpZC5maW5kKCd0cltkYXRhLWlkPScgKyBwYXlsb2FkLl9kYXRhZ3JpZF9pbmxpbmVfZWRpdGVkICsgJ10gPiB0ZCcpLmFkZENsYXNzKCdlZGl0ZWQnKTtcblx0XHRcdHJldHVybiBncmlkLmZpbmQoJy5kYXRhZ3JpZC1pbmxpbmUtZWRpdC10cmlnZ2VyJykucmVtb3ZlQ2xhc3MoJ2hpZGRlbicpO1xuXHRcdH0gZWxzZSBpZiAocGF5bG9hZC5fZGF0YWdyaWRfaW5saW5lX2VkaXRfY2FuY2VsKSB7XG5cdFx0XHRyZXR1cm4gZ3JpZC5maW5kKCcuZGF0YWdyaWQtaW5saW5lLWVkaXQtdHJpZ2dlcicpLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcblx0XHR9XG5cdH1cbn0pO1xuXG4kKGRvY3VtZW50KS5vbignbW91c2V1cCcsICdbZGF0YS1kYXRhZ3JpZC1jYW5jZWwtaW5saW5lLWFkZF0nLCBmdW5jdGlvbihlKSB7XG5cdHZhciBjb2RlID0gZS53aGljaCB8fCBlLmtleUNvZGUgfHwgMDtcblx0aWYgKGNvZGUgPT09IDEpIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRyZXR1cm4gJCgnLmRhdGFncmlkLXJvdy1pbmxpbmUtYWRkJykuYWRkQ2xhc3MoJ2RhdGFncmlkLXJvdy1pbmxpbmUtYWRkLWhpZGRlbicpO1xuXHR9XG59KTtcblxuZGF0YUdyaWRSZWdpc3RlckV4dGVuc2lvbignZGF0YWdyaWQtdG9nZ2xlLWlubGluZS1hZGQnLCB7XG5cdHN1Y2Nlc3M6IGZ1bmN0aW9uKHBheWxvYWQpIHtcblx0XHR2YXIgZ3JpZCA9ICQoJy5kYXRhZ3JpZC0nICsgcGF5bG9hZC5fZGF0YWdyaWRfbmFtZSk7XG5cblx0XHRpZiAocGF5bG9hZC5fZGF0YWdyaWRfaW5saW5lX2FkZGluZykge1xuXHRcdFx0dmFyIHJvdyA9IGdyaWQuZmluZCgnLmRhdGFncmlkLXJvdy1pbmxpbmUtYWRkJyk7XG5cblx0XHRcdGlmIChyb3cuaGFzQ2xhc3MoJ2RhdGFncmlkLXJvdy1pbmxpbmUtYWRkLWhpZGRlbicpKSB7XG5cdFx0XHRcdHJvdy5yZW1vdmVDbGFzcygnZGF0YWdyaWQtcm93LWlubGluZS1hZGQtaGlkZGVuJyk7XG5cdFx0XHR9XG5cblx0XHRcdHJvdy5maW5kKCdpbnB1dDpub3QoW3JlYWRvbmx5XSksdGV4dGFyZWE6bm90KFtyZWFkb25seV0pJykuZmlyc3QoKS5mb2N1cygpO1xuXHRcdH1cblx0fVxufSk7XG5cbmRhdGFncmlkRml0bGVyTXVsdGlTZWxlY3QgPSBmdW5jdGlvbigpIHtcblx0dmFyIHNlbGVjdCA9ICQoJy5zZWxlY3RwaWNrZXInKS5maXJzdCgpO1xuXG5cdGlmICgkLmZuLnNlbGVjdHBpY2tlcikge1xuXHRcdHJldHVybiAkLmZuLnNlbGVjdHBpY2tlci5kZWZhdWx0cyA9IHtcblx0XHRcdGNvdW50U2VsZWN0ZWRUZXh0OiBzZWxlY3QuZGF0YSgnaTE4bi1zZWxlY3RlZCcpLFxuXHRcdFx0aWNvbkJhc2U6ICcnLFxuXHRcdFx0dGlja0ljb246IHNlbGVjdC5kYXRhKCdzZWxlY3RlZC1pY29uLWNoZWNrJylcblx0XHR9O1xuXHR9XG59O1xuXG4kKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gZGF0YWdyaWRGaXRsZXJNdWx0aVNlbGVjdCgpO1xufSk7XG5cbmRhdGFncmlkR3JvdXBBY3Rpb25NdWx0aVNlbGVjdCA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgc2VsZWN0cztcblxuXHRpZiAoISQuZm4uc2VsZWN0cGlja2VyKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0c2VsZWN0cyA9ICQoJ1tkYXRhLWRhdGFncmlkLW11bHRpc2VsZWN0LWlkXScpO1xuXG5cdHJldHVybiBzZWxlY3RzLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGlkO1xuXHRcdGlmICgkKHRoaXMpLmhhc0NsYXNzKCdzZWxlY3RwaWNrZXInKSkge1xuXHRcdFx0JCh0aGlzKS5yZW1vdmVBdHRyKCdpZCcpO1xuXHRcdFx0aWQgPSAkKHRoaXMpLmRhdGEoJ2RhdGFncmlkLW11bHRpc2VsZWN0LWlkJyk7XG5cdFx0XHQkKHRoaXMpLm9uKCdsb2FkZWQuYnMuc2VsZWN0JywgZnVuY3Rpb24oZSkge1xuXHRcdFx0XHQkKHRoaXMpLnBhcmVudCgpLmF0dHIoJ3N0eWxlJywgJ2Rpc3BsYXk6bm9uZTsnKTtcblx0XHRcdFx0cmV0dXJuICQodGhpcykucGFyZW50KCkuZmluZCgnLmhpZGRlbicpLnJlbW92ZUNsYXNzKCdoaWRkZW4nKS5hZGRDbGFzcygnYnRuLWRlZmF1bHQgYnRuLXNlY29uZGFyeScpO1xuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gJCh0aGlzKS5vbigncmVuZGVyZWQuYnMuc2VsZWN0JywgZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRyZXR1cm4gJCh0aGlzKS5wYXJlbnQoKS5hdHRyKCdpZCcsIGlkKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fSk7XG59O1xuXG4kKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gZGF0YWdyaWRHcm91cEFjdGlvbk11bHRpU2VsZWN0KCk7XG59KTtcblxuZGF0YUdyaWRSZWdpc3RlckV4dGVuc2lvbignZGF0YWdyaWQuZml0bGVyTXVsdGlTZWxlY3QnLCB7XG5cdHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuXHRcdGRhdGFncmlkRml0bGVyTXVsdGlTZWxlY3QoKTtcblx0XHRpZiAoJC5mbi5zZWxlY3RwaWNrZXIpIHtcblx0XHRcdHJldHVybiAkKCcuc2VsZWN0cGlja2VyJykuc2VsZWN0cGlja2VyKHtcblx0XHRcdFx0aWNvbkJhc2U6ICdmYSdcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxufSk7XG5cbmRhdGFHcmlkUmVnaXN0ZXJFeHRlbnNpb24oJ2RhdGFncmlkLmdyb3VwQWN0aW9uTXVsdGlTZWxlY3QnLCB7XG5cdHN1Y2Nlc3M6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkYXRhZ3JpZEdyb3VwQWN0aW9uTXVsdGlTZWxlY3QoKTtcblx0fVxufSk7XG5cbmRhdGFHcmlkUmVnaXN0ZXJFeHRlbnNpb24oJ2RhdGFncmlkLmlubGluZS1lZGl0aW5nJywge1xuXHRzdWNjZXNzOiBmdW5jdGlvbihwYXlsb2FkKSB7XG5cdFx0dmFyIGdyaWQ7XG5cdFx0aWYgKHBheWxvYWQuX2RhdGFncmlkX2lubGluZV9lZGl0aW5nKSB7XG5cdFx0XHRncmlkID0gJCgnLmRhdGFncmlkLScgKyBwYXlsb2FkLl9kYXRhZ3JpZF9uYW1lKTtcblx0XHRcdHJldHVybiBncmlkLmZpbmQoJy5kYXRhZ3JpZC1pbmxpbmUtZWRpdC10cmlnZ2VyJykuYWRkQ2xhc3MoJ2hpZGRlbicpO1xuXHRcdH1cblx0fVxufSk7XG5cbmRhdGFHcmlkUmVnaXN0ZXJFeHRlbnNpb24oJ2RhdGFncmlkLnJlZHJhdy1pdGVtJywge1xuXHRzdWNjZXNzOiBmdW5jdGlvbihwYXlsb2FkKSB7XG5cdFx0dmFyIHJvdztcblx0XHRpZiAocGF5bG9hZC5fZGF0YWdyaWRfcmVkcmF3X2l0ZW1fY2xhc3MpIHtcblx0XHRcdHJvdyA9ICQoJ3RyW2RhdGEtaWQ9JyArIHBheWxvYWQuX2RhdGFncmlkX3JlZHJhd19pdGVtX2lkICsgJ10nKTtcblx0XHRcdHJldHVybiByb3cuYXR0cignY2xhc3MnLCBwYXlsb2FkLl9kYXRhZ3JpZF9yZWRyYXdfaXRlbV9jbGFzcyk7XG5cdFx0fVxuXHR9XG59KTtcblxuZGF0YUdyaWRSZWdpc3RlckV4dGVuc2lvbignZGF0YWdyaWQucmVzZXQtZmlsdGVyLWJ5LWNvbHVtbicsIHtcblx0c3VjY2VzczogZnVuY3Rpb24ocGF5bG9hZCkge1xuXHRcdHZhciBncmlkLCBocmVmLCBpLCBrZXksIGxlbiwgcmVmO1xuXHRcdGlmICghcGF5bG9hZC5fZGF0YWdyaWRfbmFtZSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRncmlkID0gJCgnLmRhdGFncmlkLScgKyBwYXlsb2FkLl9kYXRhZ3JpZF9uYW1lKTtcblx0XHRncmlkLmZpbmQoJ1tkYXRhLWRhdGFncmlkLXJlc2V0LWZpbHRlci1ieS1jb2x1bW5dJykuYWRkQ2xhc3MoJ2hpZGRlbicpO1xuXHRcdGlmIChwYXlsb2FkLm5vbl9lbXB0eV9maWx0ZXJzICYmIHBheWxvYWQubm9uX2VtcHR5X2ZpbHRlcnMubGVuZ3RoKSB7XG5cdFx0XHRyZWYgPSBwYXlsb2FkLm5vbl9lbXB0eV9maWx0ZXJzO1xuXHRcdFx0Zm9yIChpID0gMCwgbGVuID0gcmVmLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdGtleSA9IHJlZltpXTtcblx0XHRcdFx0Z3JpZC5maW5kKCdbZGF0YS1kYXRhZ3JpZC1yZXNldC1maWx0ZXItYnktY29sdW1uPScgKyBrZXkgKyAnXScpLnJlbW92ZUNsYXNzKCdoaWRkZW4nKTtcblx0XHRcdH1cblx0XHRcdGhyZWYgPSBncmlkLmZpbmQoJy5yZXNldC1maWx0ZXInKS5hdHRyKCdocmVmJyk7XG5cdFx0XHRyZXR1cm4gZ3JpZC5maW5kKCdbZGF0YS1kYXRhZ3JpZC1yZXNldC1maWx0ZXItYnktY29sdW1uXScpLmVhY2goZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBuZXdfaHJlZjtcblx0XHRcdFx0a2V5ID0gJCh0aGlzKS5hdHRyKCdkYXRhLWRhdGFncmlkLXJlc2V0LWZpbHRlci1ieS1jb2x1bW4nKTtcblx0XHRcdFx0bmV3X2hyZWYgPSBocmVmLnJlcGxhY2UoJ2RvPScgKyBwYXlsb2FkLl9kYXRhZ3JpZF9uYW1lICsgJy1yZXNldEZpbHRlcicsICdkbz0nICsgcGF5bG9hZC5fZGF0YWdyaWRfbmFtZSArICctcmVzZXRDb2x1bW5GaWx0ZXInKTtcblx0XHRcdFx0bmV3X2hyZWYgKz0gJyYnICsgcGF5bG9hZC5fZGF0YWdyaWRfbmFtZSArICcta2V5PScgKyBrZXk7XG5cdFx0XHRcdHJldHVybiAkKHRoaXMpLmF0dHIoJ2hyZWYnLCBuZXdfaHJlZik7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cbn0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9